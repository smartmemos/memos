// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: store/user_setting.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "memos.store";

export enum UserSettingKey {
  USER_SETTING_KEY_UNSPECIFIED = "USER_SETTING_KEY_UNSPECIFIED",
  /** ACCESS_TOKENS - Access tokens for the user. */
  ACCESS_TOKENS = "ACCESS_TOKENS",
  /** LOCALE - The locale of the user. */
  LOCALE = "LOCALE",
  /** APPEARANCE - The appearance of the user. */
  APPEARANCE = "APPEARANCE",
  /** MEMO_VISIBILITY - The visibility of the memo. */
  MEMO_VISIBILITY = "MEMO_VISIBILITY",
  /** SHORTCUTS - The shortcuts of the user. */
  SHORTCUTS = "SHORTCUTS",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function userSettingKeyFromJSON(object: any): UserSettingKey {
  switch (object) {
    case 0:
    case "USER_SETTING_KEY_UNSPECIFIED":
      return UserSettingKey.USER_SETTING_KEY_UNSPECIFIED;
    case 1:
    case "ACCESS_TOKENS":
      return UserSettingKey.ACCESS_TOKENS;
    case 2:
    case "LOCALE":
      return UserSettingKey.LOCALE;
    case 3:
    case "APPEARANCE":
      return UserSettingKey.APPEARANCE;
    case 4:
    case "MEMO_VISIBILITY":
      return UserSettingKey.MEMO_VISIBILITY;
    case 5:
    case "SHORTCUTS":
      return UserSettingKey.SHORTCUTS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserSettingKey.UNRECOGNIZED;
  }
}

export function userSettingKeyToNumber(object: UserSettingKey): number {
  switch (object) {
    case UserSettingKey.USER_SETTING_KEY_UNSPECIFIED:
      return 0;
    case UserSettingKey.ACCESS_TOKENS:
      return 1;
    case UserSettingKey.LOCALE:
      return 2;
    case UserSettingKey.APPEARANCE:
      return 3;
    case UserSettingKey.MEMO_VISIBILITY:
      return 4;
    case UserSettingKey.SHORTCUTS:
      return 5;
    case UserSettingKey.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface UserSetting {
  userId: number;
  key: UserSettingKey;
  accessTokens?: AccessTokensUserSetting | undefined;
  locale?: string | undefined;
  appearance?: string | undefined;
  memoVisibility?: string | undefined;
  shortcuts?: ShortcutsUserSetting | undefined;
}

export interface AccessTokensUserSetting {
  accessTokens: AccessTokensUserSetting_AccessToken[];
}

export interface AccessTokensUserSetting_AccessToken {
  /**
   * The access token is a JWT token.
   * Including expiration time, issuer, etc.
   */
  accessToken: string;
  /** A description for the access token. */
  description: string;
}

export interface ShortcutsUserSetting {
  shortcuts: ShortcutsUserSetting_Shortcut[];
}

export interface ShortcutsUserSetting_Shortcut {
  id: string;
  title: string;
  filter: string;
}

function createBaseUserSetting(): UserSetting {
  return {
    userId: 0,
    key: UserSettingKey.USER_SETTING_KEY_UNSPECIFIED,
    accessTokens: undefined,
    locale: undefined,
    appearance: undefined,
    memoVisibility: undefined,
    shortcuts: undefined,
  };
}

export const UserSetting: MessageFns<UserSetting> = {
  encode(message: UserSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.key !== UserSettingKey.USER_SETTING_KEY_UNSPECIFIED) {
      writer.uint32(16).int32(userSettingKeyToNumber(message.key));
    }
    if (message.accessTokens !== undefined) {
      AccessTokensUserSetting.encode(message.accessTokens, writer.uint32(26).fork()).join();
    }
    if (message.locale !== undefined) {
      writer.uint32(34).string(message.locale);
    }
    if (message.appearance !== undefined) {
      writer.uint32(42).string(message.appearance);
    }
    if (message.memoVisibility !== undefined) {
      writer.uint32(50).string(message.memoVisibility);
    }
    if (message.shortcuts !== undefined) {
      ShortcutsUserSetting.encode(message.shortcuts, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.key = userSettingKeyFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.accessTokens = AccessTokensUserSetting.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.locale = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.appearance = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.memoVisibility = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.shortcuts = ShortcutsUserSetting.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<UserSetting>): UserSetting {
    return UserSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserSetting>): UserSetting {
    const message = createBaseUserSetting();
    message.userId = object.userId ?? 0;
    message.key = object.key ?? UserSettingKey.USER_SETTING_KEY_UNSPECIFIED;
    message.accessTokens = (object.accessTokens !== undefined && object.accessTokens !== null)
      ? AccessTokensUserSetting.fromPartial(object.accessTokens)
      : undefined;
    message.locale = object.locale ?? undefined;
    message.appearance = object.appearance ?? undefined;
    message.memoVisibility = object.memoVisibility ?? undefined;
    message.shortcuts = (object.shortcuts !== undefined && object.shortcuts !== null)
      ? ShortcutsUserSetting.fromPartial(object.shortcuts)
      : undefined;
    return message;
  },
};

function createBaseAccessTokensUserSetting(): AccessTokensUserSetting {
  return { accessTokens: [] };
}

export const AccessTokensUserSetting: MessageFns<AccessTokensUserSetting> = {
  encode(message: AccessTokensUserSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.accessTokens) {
      AccessTokensUserSetting_AccessToken.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessTokensUserSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessTokensUserSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessTokens.push(AccessTokensUserSetting_AccessToken.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AccessTokensUserSetting>): AccessTokensUserSetting {
    return AccessTokensUserSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessTokensUserSetting>): AccessTokensUserSetting {
    const message = createBaseAccessTokensUserSetting();
    message.accessTokens = object.accessTokens?.map((e) => AccessTokensUserSetting_AccessToken.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAccessTokensUserSetting_AccessToken(): AccessTokensUserSetting_AccessToken {
  return { accessToken: "", description: "" };
}

export const AccessTokensUserSetting_AccessToken: MessageFns<AccessTokensUserSetting_AccessToken> = {
  encode(message: AccessTokensUserSetting_AccessToken, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AccessTokensUserSetting_AccessToken {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAccessTokensUserSetting_AccessToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<AccessTokensUserSetting_AccessToken>): AccessTokensUserSetting_AccessToken {
    return AccessTokensUserSetting_AccessToken.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AccessTokensUserSetting_AccessToken>): AccessTokensUserSetting_AccessToken {
    const message = createBaseAccessTokensUserSetting_AccessToken();
    message.accessToken = object.accessToken ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseShortcutsUserSetting(): ShortcutsUserSetting {
  return { shortcuts: [] };
}

export const ShortcutsUserSetting: MessageFns<ShortcutsUserSetting> = {
  encode(message: ShortcutsUserSetting, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.shortcuts) {
      ShortcutsUserSetting_Shortcut.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShortcutsUserSetting {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShortcutsUserSetting();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.shortcuts.push(ShortcutsUserSetting_Shortcut.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ShortcutsUserSetting>): ShortcutsUserSetting {
    return ShortcutsUserSetting.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShortcutsUserSetting>): ShortcutsUserSetting {
    const message = createBaseShortcutsUserSetting();
    message.shortcuts = object.shortcuts?.map((e) => ShortcutsUserSetting_Shortcut.fromPartial(e)) || [];
    return message;
  },
};

function createBaseShortcutsUserSetting_Shortcut(): ShortcutsUserSetting_Shortcut {
  return { id: "", title: "", filter: "" };
}

export const ShortcutsUserSetting_Shortcut: MessageFns<ShortcutsUserSetting_Shortcut> = {
  encode(message: ShortcutsUserSetting_Shortcut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.filter !== "") {
      writer.uint32(26).string(message.filter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShortcutsUserSetting_Shortcut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShortcutsUserSetting_Shortcut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filter = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ShortcutsUserSetting_Shortcut>): ShortcutsUserSetting_Shortcut {
    return ShortcutsUserSetting_Shortcut.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ShortcutsUserSetting_Shortcut>): ShortcutsUserSetting_Shortcut {
    const message = createBaseShortcutsUserSetting_Shortcut();
    message.id = object.id ?? "";
    message.title = object.title ?? "";
    message.filter = object.filter ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
