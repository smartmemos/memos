// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: store/memo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "memos.store";

export interface MemoPayload {
  property?: MemoPayload_Property | undefined;
  location?: MemoPayload_Location | undefined;
  tags: string[];
}

/** The calculated properties from the memo content. */
export interface MemoPayload_Property {
  hasLink: boolean;
  hasTaskList: boolean;
  hasCode: boolean;
  hasIncompleteTasks: boolean;
  /** The references of the memo. Should be a list of uuid. */
  references: string[];
}

export interface MemoPayload_Location {
  placeholder: string;
  latitude: number;
  longitude: number;
}

function createBaseMemoPayload(): MemoPayload {
  return { property: undefined, location: undefined, tags: [] };
}

export const MemoPayload: MessageFns<MemoPayload> = {
  encode(message: MemoPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.property !== undefined) {
      MemoPayload_Property.encode(message.property, writer.uint32(10).fork()).join();
    }
    if (message.location !== undefined) {
      MemoPayload_Location.encode(message.location, writer.uint32(18).fork()).join();
    }
    for (const v of message.tags) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MemoPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMemoPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.property = MemoPayload_Property.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.location = MemoPayload_Location.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MemoPayload>): MemoPayload {
    return MemoPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MemoPayload>): MemoPayload {
    const message = createBaseMemoPayload();
    message.property = (object.property !== undefined && object.property !== null)
      ? MemoPayload_Property.fromPartial(object.property)
      : undefined;
    message.location = (object.location !== undefined && object.location !== null)
      ? MemoPayload_Location.fromPartial(object.location)
      : undefined;
    message.tags = object.tags?.map((e) => e) || [];
    return message;
  },
};

function createBaseMemoPayload_Property(): MemoPayload_Property {
  return { hasLink: false, hasTaskList: false, hasCode: false, hasIncompleteTasks: false, references: [] };
}

export const MemoPayload_Property: MessageFns<MemoPayload_Property> = {
  encode(message: MemoPayload_Property, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hasLink !== false) {
      writer.uint32(8).bool(message.hasLink);
    }
    if (message.hasTaskList !== false) {
      writer.uint32(16).bool(message.hasTaskList);
    }
    if (message.hasCode !== false) {
      writer.uint32(24).bool(message.hasCode);
    }
    if (message.hasIncompleteTasks !== false) {
      writer.uint32(32).bool(message.hasIncompleteTasks);
    }
    for (const v of message.references) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MemoPayload_Property {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMemoPayload_Property();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.hasLink = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.hasTaskList = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hasCode = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hasIncompleteTasks = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.references.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MemoPayload_Property>): MemoPayload_Property {
    return MemoPayload_Property.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MemoPayload_Property>): MemoPayload_Property {
    const message = createBaseMemoPayload_Property();
    message.hasLink = object.hasLink ?? false;
    message.hasTaskList = object.hasTaskList ?? false;
    message.hasCode = object.hasCode ?? false;
    message.hasIncompleteTasks = object.hasIncompleteTasks ?? false;
    message.references = object.references?.map((e) => e) || [];
    return message;
  },
};

function createBaseMemoPayload_Location(): MemoPayload_Location {
  return { placeholder: "", latitude: 0, longitude: 0 };
}

export const MemoPayload_Location: MessageFns<MemoPayload_Location> = {
  encode(message: MemoPayload_Location, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.placeholder !== "") {
      writer.uint32(10).string(message.placeholder);
    }
    if (message.latitude !== 0) {
      writer.uint32(17).double(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(25).double(message.longitude);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MemoPayload_Location {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMemoPayload_Location();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.placeholder = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MemoPayload_Location>): MemoPayload_Location {
    return MemoPayload_Location.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MemoPayload_Location>): MemoPayload_Location {
    const message = createBaseMemoPayload_Location();
    message.placeholder = object.placeholder ?? "";
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
