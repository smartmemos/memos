// @generated by protoc-gen-es v2.6.2 with parameter "target=ts"
// @generated from file model/markdown/markdown.proto (package markdown, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_api_field_behavior } from "../../google/api/field_behavior_pb";
import { file_model_common_common } from "../common/common_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file model/markdown/markdown.proto.
 */
export const file_model_markdown_markdown: GenFile = /*@__PURE__*/
  fileDesc("Ch1tb2RlbC9tYXJrZG93bi9tYXJrZG93bi5wcm90bxIIbWFya2Rvd24iQQoMTGlua01ldGFkYXRhEg0KBXRpdGxlGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEg0KBWltYWdlGAMgASgJIvEMCgROb2RlEiAKBHR5cGUYASABKA4yEi5tYXJrZG93bi5Ob2RlVHlwZRIyCg9saW5lX2JyZWFrX25vZGUYCyABKAsyFy5tYXJrZG93bi5MaW5lQnJlYWtOb2RlSAASMQoOcGFyYWdyYXBoX25vZGUYDCABKAsyFy5tYXJrZG93bi5QYXJhZ3JhcGhOb2RlSAASMgoPY29kZV9ibG9ja19ub2RlGA0gASgLMhcubWFya2Rvd24uQ29kZUJsb2NrTm9kZUgAEi0KDGhlYWRpbmdfbm9kZRgOIAEoCzIVLm1hcmtkb3duLkhlYWRpbmdOb2RlSAASPAoUaG9yaXpvbnRhbF9ydWxlX25vZGUYDyABKAsyHC5tYXJrZG93bi5Ib3Jpem9udGFsUnVsZU5vZGVIABIzCg9ibG9ja3F1b3RlX25vZGUYECABKAsyGC5tYXJrZG93bi5CbG9ja3F1b3RlTm9kZUgAEicKCWxpc3Rfbm9kZRgRIAEoCzISLm1hcmtkb3duLkxpc3ROb2RlSAASPwoWb3JkZXJlZF9saXN0X2l0ZW1fbm9kZRgSIAEoCzIdLm1hcmtkb3duLk9yZGVyZWRMaXN0SXRlbU5vZGVIABJDChh1bm9yZGVyZWRfbGlzdF9pdGVtX25vZGUYEyABKAsyHy5tYXJrZG93bi5Vbm9yZGVyZWRMaXN0SXRlbU5vZGVIABI5ChN0YXNrX2xpc3RfaXRlbV9ub2RlGBQgASgLMhoubWFya2Rvd24uVGFza0xpc3RJdGVtTm9kZUgAEjIKD21hdGhfYmxvY2tfbm9kZRgVIAEoCzIXLm1hcmtkb3duLk1hdGhCbG9ja05vZGVIABIpCgp0YWJsZV9ub2RlGBYgASgLMhMubWFya2Rvd24uVGFibGVOb2RlSAASPgoVZW1iZWRkZWRfY29udGVudF9ub2RlGBcgASgLMh0ubWFya2Rvd24uRW1iZWRkZWRDb250ZW50Tm9kZUgAEicKCXRleHRfbm9kZRgzIAEoCzISLm1hcmtkb3duLlRleHROb2RlSAASJwoJYm9sZF9ub2RlGDQgASgLMhIubWFya2Rvd24uQm9sZE5vZGVIABIrCgtpdGFsaWNfbm9kZRg1IAEoCzIULm1hcmtkb3duLkl0YWxpY05vZGVIABI0ChBib2xkX2l0YWxpY19ub2RlGDYgASgLMhgubWFya2Rvd24uQm9sZEl0YWxpY05vZGVIABInCgljb2RlX25vZGUYNyABKAsyEi5tYXJrZG93bi5Db2RlTm9kZUgAEikKCmltYWdlX25vZGUYOCABKAsyEy5tYXJrZG93bi5JbWFnZU5vZGVIABInCglsaW5rX25vZGUYOSABKAsyEi5tYXJrZG93bi5MaW5rTm9kZUgAEjAKDmF1dG9fbGlua19ub2RlGDogASgLMhYubWFya2Rvd24uQXV0b0xpbmtOb2RlSAASJQoIdGFnX25vZGUYOyABKAsyES5tYXJrZG93bi5UYWdOb2RlSAASOQoSc3RyaWtldGhyb3VnaF9ub2RlGDwgASgLMhsubWFya2Rvd24uU3RyaWtldGhyb3VnaE5vZGVIABJCChdlc2NhcGluZ19jaGFyYWN0ZXJfbm9kZRg9IAEoCzIfLm1hcmtkb3duLkVzY2FwaW5nQ2hhcmFjdGVyTm9kZUgAEicKCW1hdGhfbm9kZRg+IAEoCzISLm1hcmtkb3duLk1hdGhOb2RlSAASMQoOaGlnaGxpZ2h0X25vZGUYPyABKAsyFy5tYXJrZG93bi5IaWdobGlnaHROb2RlSAASMQoOc3Vic2NyaXB0X25vZGUYQCABKAsyFy5tYXJrZG93bi5TdWJzY3JpcHROb2RlSAASNQoQc3VwZXJzY3JpcHRfbm9kZRhBIAEoCzIZLm1hcmtkb3duLlN1cGVyc2NyaXB0Tm9kZUgAEkIKF3JlZmVyZW5jZWRfY29udGVudF9ub2RlGEIgASgLMh8ubWFya2Rvd24uUmVmZXJlbmNlZENvbnRlbnROb2RlSAASLQoMc3BvaWxlcl9ub2RlGEMgASgLMhUubWFya2Rvd24uU3BvaWxlck5vZGVIABI2ChFodG1sX2VsZW1lbnRfbm9kZRhEIAEoCzIZLm1hcmtkb3duLkhUTUxFbGVtZW50Tm9kZUgAQgYKBG5vZGUiDwoNTGluZUJyZWFrTm9kZSIxCg1QYXJhZ3JhcGhOb2RlEiAKCGNoaWxkcmVuGAEgAygLMg4ubWFya2Rvd24uTm9kZSIyCg1Db2RlQmxvY2tOb2RlEhAKCGxhbmd1YWdlGAEgASgJEg8KB2NvbnRlbnQYAiABKAkiPgoLSGVhZGluZ05vZGUSDQoFbGV2ZWwYASABKAUSIAoIY2hpbGRyZW4YAiADKAsyDi5tYXJrZG93bi5Ob2RlIiQKEkhvcml6b250YWxSdWxlTm9kZRIOCgZzeW1ib2wYASABKAkiMgoOQmxvY2txdW90ZU5vZGUSIAoIY2hpbGRyZW4YASADKAsyDi5tYXJrZG93bi5Ob2RlIq4BCghMaXN0Tm9kZRIlCgRraW5kGAEgASgOMhcubWFya2Rvd24uTGlzdE5vZGUuS2luZBIOCgZpbmRlbnQYAiABKAUSIAoIY2hpbGRyZW4YAyADKAsyDi5tYXJrZG93bi5Ob2RlIkkKBEtpbmQSFAoQS0lORF9VTlNQRUNJRklFRBAAEgsKB09SREVSRUQQARINCglVTk9SREVSRUQQAhIPCgtERVNDUklQVElPThADIlcKE09yZGVyZWRMaXN0SXRlbU5vZGUSDgoGbnVtYmVyGAEgASgJEg4KBmluZGVudBgCIAEoBRIgCghjaGlsZHJlbhgDIAMoCzIOLm1hcmtkb3duLk5vZGUiWQoVVW5vcmRlcmVkTGlzdEl0ZW1Ob2RlEg4KBnN5bWJvbBgBIAEoCRIOCgZpbmRlbnQYAiABKAUSIAoIY2hpbGRyZW4YAyADKAsyDi5tYXJrZG93bi5Ob2RlImYKEFRhc2tMaXN0SXRlbU5vZGUSDgoGc3ltYm9sGAEgASgJEg4KBmluZGVudBgCIAEoBRIQCghjb21wbGV0ZRgDIAEoCBIgCghjaGlsZHJlbhgEIAMoCzIOLm1hcmtkb3duLk5vZGUiIAoNTWF0aEJsb2NrTm9kZRIPCgdjb250ZW50GAEgASgJIosBCglUYWJsZU5vZGUSHgoGaGVhZGVyGAEgAygLMg4ubWFya2Rvd24uTm9kZRIRCglkZWxpbWl0ZXIYAiADKAkSJQoEcm93cxgDIAMoCzIXLm1hcmtkb3duLlRhYmxlTm9kZS5Sb3caJAoDUm93Eh0KBWNlbGxzGAEgAygLMg4ubWFya2Rvd24uTm9kZSI8ChNFbWJlZGRlZENvbnRlbnROb2RlEhUKDXJlc291cmNlX25hbWUYASABKAkSDgoGcGFyYW1zGAIgASgJIhsKCFRleHROb2RlEg8KB2NvbnRlbnQYASABKAkiPAoIQm9sZE5vZGUSDgoGc3ltYm9sGAEgASgJEiAKCGNoaWxkcmVuGAIgAygLMg4ubWFya2Rvd24uTm9kZSItCgpJdGFsaWNOb2RlEg4KBnN5bWJvbBgBIAEoCRIPCgdjb250ZW50GAIgASgJIjEKDkJvbGRJdGFsaWNOb2RlEg4KBnN5bWJvbBgBIAEoCRIPCgdjb250ZW50GAIgASgJIhsKCENvZGVOb2RlEg8KB2NvbnRlbnQYASABKAkiKgoJSW1hZ2VOb2RlEhAKCGFsdF90ZXh0GAEgASgJEgsKA3VybBgCIAEoCSI4CghMaW5rTm9kZRIfCgdjb250ZW50GAEgAygLMg4ubWFya2Rvd24uTm9kZRILCgN1cmwYAiABKAkiMAoMQXV0b0xpbmtOb2RlEgsKA3VybBgBIAEoCRITCgtpc19yYXdfdGV4dBgCIAEoCCIaCgdUYWdOb2RlEg8KB2NvbnRlbnQYASABKAkiJAoRU3RyaWtldGhyb3VnaE5vZGUSDwoHY29udGVudBgBIAEoCSInChVFc2NhcGluZ0NoYXJhY3Rlck5vZGUSDgoGc3ltYm9sGAEgASgJIhsKCE1hdGhOb2RlEg8KB2NvbnRlbnQYASABKAkiIAoNSGlnaGxpZ2h0Tm9kZRIPCgdjb250ZW50GAEgASgJIiAKDVN1YnNjcmlwdE5vZGUSDwoHY29udGVudBgBIAEoCSIiCg9TdXBlcnNjcmlwdE5vZGUSDwoHY29udGVudBgBIAEoCSI+ChVSZWZlcmVuY2VkQ29udGVudE5vZGUSFQoNcmVzb3VyY2VfbmFtZRgBIAEoCRIOCgZwYXJhbXMYAiABKAkiHgoLU3BvaWxlck5vZGUSDwoHY29udGVudBgBIAEoCSKVAQoPSFRNTEVsZW1lbnROb2RlEhAKCHRhZ19uYW1lGAEgASgJEj0KCmF0dHJpYnV0ZXMYAiADKAsyKS5tYXJrZG93bi5IVE1MRWxlbWVudE5vZGUuQXR0cmlidXRlc0VudHJ5GjEKD0F0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBKoMECghOb2RlVHlwZRIUChBOT0RFX1VOU1BFQ0lGSUVEEAASDgoKTElORV9CUkVBSxABEg0KCVBBUkFHUkFQSBACEg4KCkNPREVfQkxPQ0sQAxILCgdIRUFESU5HEAQSEwoPSE9SSVpPTlRBTF9SVUxFEAUSDgoKQkxPQ0tRVU9URRAGEggKBExJU1QQBxIVChFPUkRFUkVEX0xJU1RfSVRFTRAIEhcKE1VOT1JERVJFRF9MSVNUX0lURU0QCRISCg5UQVNLX0xJU1RfSVRFTRAKEg4KCk1BVEhfQkxPQ0sQCxIJCgVUQUJMRRAMEhQKEEVNQkVEREVEX0NPTlRFTlQQDRIICgRURVhUEDMSCAoEQk9MRBA0EgoKBklUQUxJQxA1Eg8KC0JPTERfSVRBTElDEDYSCAoEQ09ERRA3EgkKBUlNQUdFEDgSCAoETElOSxA5Eg0KCUFVVE9fTElOSxA6EgcKA1RBRxA7EhEKDVNUUklLRVRIUk9VR0gQPBIWChJFU0NBUElOR19DSEFSQUNURVIQPRIICgRNQVRIED4SDQoJSElHSExJR0hUED8SDQoJU1VCU0NSSVBUEEASDwoLU1VQRVJTQ1JJUFQQQRIWChJSRUZFUkVOQ0VEX0NPTlRFTlQQQhILCgdTUE9JTEVSEEMSEAoMSFRNTF9FTEVNRU5UEERCO1o5Z2l0aHViLmNvbS9zbWFydG1lbW9zL21lbW9zL2ludGVybmFsL3Byb3RvL21vZGVsL21hcmtkb3duYgZwcm90bzM", [file_google_protobuf_timestamp, file_google_api_field_behavior, file_model_common_common]);

/**
 * @generated from message markdown.LinkMetadata
 */
export type LinkMetadata = Message<"markdown.LinkMetadata"> & {
  /**
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * @generated from field: string image = 3;
   */
  image: string;
};

/**
 * Describes the message markdown.LinkMetadata.
 * Use `create(LinkMetadataSchema)` to create a new message.
 */
export const LinkMetadataSchema: GenMessage<LinkMetadata> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 0);

/**
 * @generated from message markdown.Node
 */
export type Node = Message<"markdown.Node"> & {
  /**
   * @generated from field: markdown.NodeType type = 1;
   */
  type: NodeType;

  /**
   * @generated from oneof markdown.Node.node
   */
  node: {
    /**
     * Block nodes.
     *
     * @generated from field: markdown.LineBreakNode line_break_node = 11;
     */
    value: LineBreakNode;
    case: "lineBreakNode";
  } | {
    /**
     * @generated from field: markdown.ParagraphNode paragraph_node = 12;
     */
    value: ParagraphNode;
    case: "paragraphNode";
  } | {
    /**
     * @generated from field: markdown.CodeBlockNode code_block_node = 13;
     */
    value: CodeBlockNode;
    case: "codeBlockNode";
  } | {
    /**
     * @generated from field: markdown.HeadingNode heading_node = 14;
     */
    value: HeadingNode;
    case: "headingNode";
  } | {
    /**
     * @generated from field: markdown.HorizontalRuleNode horizontal_rule_node = 15;
     */
    value: HorizontalRuleNode;
    case: "horizontalRuleNode";
  } | {
    /**
     * @generated from field: markdown.BlockquoteNode blockquote_node = 16;
     */
    value: BlockquoteNode;
    case: "blockquoteNode";
  } | {
    /**
     * @generated from field: markdown.ListNode list_node = 17;
     */
    value: ListNode;
    case: "listNode";
  } | {
    /**
     * @generated from field: markdown.OrderedListItemNode ordered_list_item_node = 18;
     */
    value: OrderedListItemNode;
    case: "orderedListItemNode";
  } | {
    /**
     * @generated from field: markdown.UnorderedListItemNode unordered_list_item_node = 19;
     */
    value: UnorderedListItemNode;
    case: "unorderedListItemNode";
  } | {
    /**
     * @generated from field: markdown.TaskListItemNode task_list_item_node = 20;
     */
    value: TaskListItemNode;
    case: "taskListItemNode";
  } | {
    /**
     * @generated from field: markdown.MathBlockNode math_block_node = 21;
     */
    value: MathBlockNode;
    case: "mathBlockNode";
  } | {
    /**
     * @generated from field: markdown.TableNode table_node = 22;
     */
    value: TableNode;
    case: "tableNode";
  } | {
    /**
     * @generated from field: markdown.EmbeddedContentNode embedded_content_node = 23;
     */
    value: EmbeddedContentNode;
    case: "embeddedContentNode";
  } | {
    /**
     * Inline nodes.
     *
     * @generated from field: markdown.TextNode text_node = 51;
     */
    value: TextNode;
    case: "textNode";
  } | {
    /**
     * @generated from field: markdown.BoldNode bold_node = 52;
     */
    value: BoldNode;
    case: "boldNode";
  } | {
    /**
     * @generated from field: markdown.ItalicNode italic_node = 53;
     */
    value: ItalicNode;
    case: "italicNode";
  } | {
    /**
     * @generated from field: markdown.BoldItalicNode bold_italic_node = 54;
     */
    value: BoldItalicNode;
    case: "boldItalicNode";
  } | {
    /**
     * @generated from field: markdown.CodeNode code_node = 55;
     */
    value: CodeNode;
    case: "codeNode";
  } | {
    /**
     * @generated from field: markdown.ImageNode image_node = 56;
     */
    value: ImageNode;
    case: "imageNode";
  } | {
    /**
     * @generated from field: markdown.LinkNode link_node = 57;
     */
    value: LinkNode;
    case: "linkNode";
  } | {
    /**
     * @generated from field: markdown.AutoLinkNode auto_link_node = 58;
     */
    value: AutoLinkNode;
    case: "autoLinkNode";
  } | {
    /**
     * @generated from field: markdown.TagNode tag_node = 59;
     */
    value: TagNode;
    case: "tagNode";
  } | {
    /**
     * @generated from field: markdown.StrikethroughNode strikethrough_node = 60;
     */
    value: StrikethroughNode;
    case: "strikethroughNode";
  } | {
    /**
     * @generated from field: markdown.EscapingCharacterNode escaping_character_node = 61;
     */
    value: EscapingCharacterNode;
    case: "escapingCharacterNode";
  } | {
    /**
     * @generated from field: markdown.MathNode math_node = 62;
     */
    value: MathNode;
    case: "mathNode";
  } | {
    /**
     * @generated from field: markdown.HighlightNode highlight_node = 63;
     */
    value: HighlightNode;
    case: "highlightNode";
  } | {
    /**
     * @generated from field: markdown.SubscriptNode subscript_node = 64;
     */
    value: SubscriptNode;
    case: "subscriptNode";
  } | {
    /**
     * @generated from field: markdown.SuperscriptNode superscript_node = 65;
     */
    value: SuperscriptNode;
    case: "superscriptNode";
  } | {
    /**
     * @generated from field: markdown.ReferencedContentNode referenced_content_node = 66;
     */
    value: ReferencedContentNode;
    case: "referencedContentNode";
  } | {
    /**
     * @generated from field: markdown.SpoilerNode spoiler_node = 67;
     */
    value: SpoilerNode;
    case: "spoilerNode";
  } | {
    /**
     * @generated from field: markdown.HTMLElementNode html_element_node = 68;
     */
    value: HTMLElementNode;
    case: "htmlElementNode";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message markdown.Node.
 * Use `create(NodeSchema)` to create a new message.
 */
export const NodeSchema: GenMessage<Node> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 1);

/**
 * @generated from message markdown.LineBreakNode
 */
export type LineBreakNode = Message<"markdown.LineBreakNode"> & {
};

/**
 * Describes the message markdown.LineBreakNode.
 * Use `create(LineBreakNodeSchema)` to create a new message.
 */
export const LineBreakNodeSchema: GenMessage<LineBreakNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 2);

/**
 * @generated from message markdown.ParagraphNode
 */
export type ParagraphNode = Message<"markdown.ParagraphNode"> & {
  /**
   * @generated from field: repeated markdown.Node children = 1;
   */
  children: Node[];
};

/**
 * Describes the message markdown.ParagraphNode.
 * Use `create(ParagraphNodeSchema)` to create a new message.
 */
export const ParagraphNodeSchema: GenMessage<ParagraphNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 3);

/**
 * @generated from message markdown.CodeBlockNode
 */
export type CodeBlockNode = Message<"markdown.CodeBlockNode"> & {
  /**
   * @generated from field: string language = 1;
   */
  language: string;

  /**
   * @generated from field: string content = 2;
   */
  content: string;
};

/**
 * Describes the message markdown.CodeBlockNode.
 * Use `create(CodeBlockNodeSchema)` to create a new message.
 */
export const CodeBlockNodeSchema: GenMessage<CodeBlockNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 4);

/**
 * @generated from message markdown.HeadingNode
 */
export type HeadingNode = Message<"markdown.HeadingNode"> & {
  /**
   * @generated from field: int32 level = 1;
   */
  level: number;

  /**
   * @generated from field: repeated markdown.Node children = 2;
   */
  children: Node[];
};

/**
 * Describes the message markdown.HeadingNode.
 * Use `create(HeadingNodeSchema)` to create a new message.
 */
export const HeadingNodeSchema: GenMessage<HeadingNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 5);

/**
 * @generated from message markdown.HorizontalRuleNode
 */
export type HorizontalRuleNode = Message<"markdown.HorizontalRuleNode"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;
};

/**
 * Describes the message markdown.HorizontalRuleNode.
 * Use `create(HorizontalRuleNodeSchema)` to create a new message.
 */
export const HorizontalRuleNodeSchema: GenMessage<HorizontalRuleNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 6);

/**
 * @generated from message markdown.BlockquoteNode
 */
export type BlockquoteNode = Message<"markdown.BlockquoteNode"> & {
  /**
   * @generated from field: repeated markdown.Node children = 1;
   */
  children: Node[];
};

/**
 * Describes the message markdown.BlockquoteNode.
 * Use `create(BlockquoteNodeSchema)` to create a new message.
 */
export const BlockquoteNodeSchema: GenMessage<BlockquoteNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 7);

/**
 * @generated from message markdown.ListNode
 */
export type ListNode = Message<"markdown.ListNode"> & {
  /**
   * @generated from field: markdown.ListNode.Kind kind = 1;
   */
  kind: ListNode_Kind;

  /**
   * @generated from field: int32 indent = 2;
   */
  indent: number;

  /**
   * @generated from field: repeated markdown.Node children = 3;
   */
  children: Node[];
};

/**
 * Describes the message markdown.ListNode.
 * Use `create(ListNodeSchema)` to create a new message.
 */
export const ListNodeSchema: GenMessage<ListNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 8);

/**
 * @generated from enum markdown.ListNode.Kind
 */
export enum ListNode_Kind {
  /**
   * @generated from enum value: KIND_UNSPECIFIED = 0;
   */
  KIND_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ORDERED = 1;
   */
  ORDERED = 1,

  /**
   * @generated from enum value: UNORDERED = 2;
   */
  UNORDERED = 2,

  /**
   * @generated from enum value: DESCRIPTION = 3;
   */
  DESCRIPTION = 3,
}

/**
 * Describes the enum markdown.ListNode.Kind.
 */
export const ListNode_KindSchema: GenEnum<ListNode_Kind> = /*@__PURE__*/
  enumDesc(file_model_markdown_markdown, 8, 0);

/**
 * @generated from message markdown.OrderedListItemNode
 */
export type OrderedListItemNode = Message<"markdown.OrderedListItemNode"> & {
  /**
   * @generated from field: string number = 1;
   */
  number: string;

  /**
   * @generated from field: int32 indent = 2;
   */
  indent: number;

  /**
   * @generated from field: repeated markdown.Node children = 3;
   */
  children: Node[];
};

/**
 * Describes the message markdown.OrderedListItemNode.
 * Use `create(OrderedListItemNodeSchema)` to create a new message.
 */
export const OrderedListItemNodeSchema: GenMessage<OrderedListItemNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 9);

/**
 * @generated from message markdown.UnorderedListItemNode
 */
export type UnorderedListItemNode = Message<"markdown.UnorderedListItemNode"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;

  /**
   * @generated from field: int32 indent = 2;
   */
  indent: number;

  /**
   * @generated from field: repeated markdown.Node children = 3;
   */
  children: Node[];
};

/**
 * Describes the message markdown.UnorderedListItemNode.
 * Use `create(UnorderedListItemNodeSchema)` to create a new message.
 */
export const UnorderedListItemNodeSchema: GenMessage<UnorderedListItemNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 10);

/**
 * @generated from message markdown.TaskListItemNode
 */
export type TaskListItemNode = Message<"markdown.TaskListItemNode"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;

  /**
   * @generated from field: int32 indent = 2;
   */
  indent: number;

  /**
   * @generated from field: bool complete = 3;
   */
  complete: boolean;

  /**
   * @generated from field: repeated markdown.Node children = 4;
   */
  children: Node[];
};

/**
 * Describes the message markdown.TaskListItemNode.
 * Use `create(TaskListItemNodeSchema)` to create a new message.
 */
export const TaskListItemNodeSchema: GenMessage<TaskListItemNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 11);

/**
 * @generated from message markdown.MathBlockNode
 */
export type MathBlockNode = Message<"markdown.MathBlockNode"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message markdown.MathBlockNode.
 * Use `create(MathBlockNodeSchema)` to create a new message.
 */
export const MathBlockNodeSchema: GenMessage<MathBlockNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 12);

/**
 * @generated from message markdown.TableNode
 */
export type TableNode = Message<"markdown.TableNode"> & {
  /**
   * @generated from field: repeated markdown.Node header = 1;
   */
  header: Node[];

  /**
   * @generated from field: repeated string delimiter = 2;
   */
  delimiter: string[];

  /**
   * @generated from field: repeated markdown.TableNode.Row rows = 3;
   */
  rows: TableNode_Row[];
};

/**
 * Describes the message markdown.TableNode.
 * Use `create(TableNodeSchema)` to create a new message.
 */
export const TableNodeSchema: GenMessage<TableNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 13);

/**
 * @generated from message markdown.TableNode.Row
 */
export type TableNode_Row = Message<"markdown.TableNode.Row"> & {
  /**
   * @generated from field: repeated markdown.Node cells = 1;
   */
  cells: Node[];
};

/**
 * Describes the message markdown.TableNode.Row.
 * Use `create(TableNode_RowSchema)` to create a new message.
 */
export const TableNode_RowSchema: GenMessage<TableNode_Row> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 13, 0);

/**
 * @generated from message markdown.EmbeddedContentNode
 */
export type EmbeddedContentNode = Message<"markdown.EmbeddedContentNode"> & {
  /**
   * @generated from field: string resource_name = 1;
   */
  resourceName: string;

  /**
   * @generated from field: string params = 2;
   */
  params: string;
};

/**
 * Describes the message markdown.EmbeddedContentNode.
 * Use `create(EmbeddedContentNodeSchema)` to create a new message.
 */
export const EmbeddedContentNodeSchema: GenMessage<EmbeddedContentNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 14);

/**
 * @generated from message markdown.TextNode
 */
export type TextNode = Message<"markdown.TextNode"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message markdown.TextNode.
 * Use `create(TextNodeSchema)` to create a new message.
 */
export const TextNodeSchema: GenMessage<TextNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 15);

/**
 * @generated from message markdown.BoldNode
 */
export type BoldNode = Message<"markdown.BoldNode"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;

  /**
   * @generated from field: repeated markdown.Node children = 2;
   */
  children: Node[];
};

/**
 * Describes the message markdown.BoldNode.
 * Use `create(BoldNodeSchema)` to create a new message.
 */
export const BoldNodeSchema: GenMessage<BoldNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 16);

/**
 * @generated from message markdown.ItalicNode
 */
export type ItalicNode = Message<"markdown.ItalicNode"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;

  /**
   * @generated from field: string content = 2;
   */
  content: string;
};

/**
 * Describes the message markdown.ItalicNode.
 * Use `create(ItalicNodeSchema)` to create a new message.
 */
export const ItalicNodeSchema: GenMessage<ItalicNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 17);

/**
 * @generated from message markdown.BoldItalicNode
 */
export type BoldItalicNode = Message<"markdown.BoldItalicNode"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;

  /**
   * @generated from field: string content = 2;
   */
  content: string;
};

/**
 * Describes the message markdown.BoldItalicNode.
 * Use `create(BoldItalicNodeSchema)` to create a new message.
 */
export const BoldItalicNodeSchema: GenMessage<BoldItalicNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 18);

/**
 * @generated from message markdown.CodeNode
 */
export type CodeNode = Message<"markdown.CodeNode"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message markdown.CodeNode.
 * Use `create(CodeNodeSchema)` to create a new message.
 */
export const CodeNodeSchema: GenMessage<CodeNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 19);

/**
 * @generated from message markdown.ImageNode
 */
export type ImageNode = Message<"markdown.ImageNode"> & {
  /**
   * @generated from field: string alt_text = 1;
   */
  altText: string;

  /**
   * @generated from field: string url = 2;
   */
  url: string;
};

/**
 * Describes the message markdown.ImageNode.
 * Use `create(ImageNodeSchema)` to create a new message.
 */
export const ImageNodeSchema: GenMessage<ImageNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 20);

/**
 * @generated from message markdown.LinkNode
 */
export type LinkNode = Message<"markdown.LinkNode"> & {
  /**
   * @generated from field: repeated markdown.Node content = 1;
   */
  content: Node[];

  /**
   * @generated from field: string url = 2;
   */
  url: string;
};

/**
 * Describes the message markdown.LinkNode.
 * Use `create(LinkNodeSchema)` to create a new message.
 */
export const LinkNodeSchema: GenMessage<LinkNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 21);

/**
 * @generated from message markdown.AutoLinkNode
 */
export type AutoLinkNode = Message<"markdown.AutoLinkNode"> & {
  /**
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * @generated from field: bool is_raw_text = 2;
   */
  isRawText: boolean;
};

/**
 * Describes the message markdown.AutoLinkNode.
 * Use `create(AutoLinkNodeSchema)` to create a new message.
 */
export const AutoLinkNodeSchema: GenMessage<AutoLinkNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 22);

/**
 * @generated from message markdown.TagNode
 */
export type TagNode = Message<"markdown.TagNode"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message markdown.TagNode.
 * Use `create(TagNodeSchema)` to create a new message.
 */
export const TagNodeSchema: GenMessage<TagNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 23);

/**
 * @generated from message markdown.StrikethroughNode
 */
export type StrikethroughNode = Message<"markdown.StrikethroughNode"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message markdown.StrikethroughNode.
 * Use `create(StrikethroughNodeSchema)` to create a new message.
 */
export const StrikethroughNodeSchema: GenMessage<StrikethroughNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 24);

/**
 * @generated from message markdown.EscapingCharacterNode
 */
export type EscapingCharacterNode = Message<"markdown.EscapingCharacterNode"> & {
  /**
   * @generated from field: string symbol = 1;
   */
  symbol: string;
};

/**
 * Describes the message markdown.EscapingCharacterNode.
 * Use `create(EscapingCharacterNodeSchema)` to create a new message.
 */
export const EscapingCharacterNodeSchema: GenMessage<EscapingCharacterNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 25);

/**
 * @generated from message markdown.MathNode
 */
export type MathNode = Message<"markdown.MathNode"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message markdown.MathNode.
 * Use `create(MathNodeSchema)` to create a new message.
 */
export const MathNodeSchema: GenMessage<MathNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 26);

/**
 * @generated from message markdown.HighlightNode
 */
export type HighlightNode = Message<"markdown.HighlightNode"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message markdown.HighlightNode.
 * Use `create(HighlightNodeSchema)` to create a new message.
 */
export const HighlightNodeSchema: GenMessage<HighlightNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 27);

/**
 * @generated from message markdown.SubscriptNode
 */
export type SubscriptNode = Message<"markdown.SubscriptNode"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message markdown.SubscriptNode.
 * Use `create(SubscriptNodeSchema)` to create a new message.
 */
export const SubscriptNodeSchema: GenMessage<SubscriptNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 28);

/**
 * @generated from message markdown.SuperscriptNode
 */
export type SuperscriptNode = Message<"markdown.SuperscriptNode"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message markdown.SuperscriptNode.
 * Use `create(SuperscriptNodeSchema)` to create a new message.
 */
export const SuperscriptNodeSchema: GenMessage<SuperscriptNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 29);

/**
 * @generated from message markdown.ReferencedContentNode
 */
export type ReferencedContentNode = Message<"markdown.ReferencedContentNode"> & {
  /**
   * @generated from field: string resource_name = 1;
   */
  resourceName: string;

  /**
   * @generated from field: string params = 2;
   */
  params: string;
};

/**
 * Describes the message markdown.ReferencedContentNode.
 * Use `create(ReferencedContentNodeSchema)` to create a new message.
 */
export const ReferencedContentNodeSchema: GenMessage<ReferencedContentNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 30);

/**
 * @generated from message markdown.SpoilerNode
 */
export type SpoilerNode = Message<"markdown.SpoilerNode"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message markdown.SpoilerNode.
 * Use `create(SpoilerNodeSchema)` to create a new message.
 */
export const SpoilerNodeSchema: GenMessage<SpoilerNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 31);

/**
 * @generated from message markdown.HTMLElementNode
 */
export type HTMLElementNode = Message<"markdown.HTMLElementNode"> & {
  /**
   * @generated from field: string tag_name = 1;
   */
  tagName: string;

  /**
   * @generated from field: map<string, string> attributes = 2;
   */
  attributes: { [key: string]: string };
};

/**
 * Describes the message markdown.HTMLElementNode.
 * Use `create(HTMLElementNodeSchema)` to create a new message.
 */
export const HTMLElementNodeSchema: GenMessage<HTMLElementNode> = /*@__PURE__*/
  messageDesc(file_model_markdown_markdown, 32);

/**
 * @generated from enum markdown.NodeType
 */
export enum NodeType {
  /**
   * @generated from enum value: NODE_UNSPECIFIED = 0;
   */
  NODE_UNSPECIFIED = 0,

  /**
   * Block nodes.
   *
   * @generated from enum value: LINE_BREAK = 1;
   */
  LINE_BREAK = 1,

  /**
   * @generated from enum value: PARAGRAPH = 2;
   */
  PARAGRAPH = 2,

  /**
   * @generated from enum value: CODE_BLOCK = 3;
   */
  CODE_BLOCK = 3,

  /**
   * @generated from enum value: HEADING = 4;
   */
  HEADING = 4,

  /**
   * @generated from enum value: HORIZONTAL_RULE = 5;
   */
  HORIZONTAL_RULE = 5,

  /**
   * @generated from enum value: BLOCKQUOTE = 6;
   */
  BLOCKQUOTE = 6,

  /**
   * @generated from enum value: LIST = 7;
   */
  LIST = 7,

  /**
   * @generated from enum value: ORDERED_LIST_ITEM = 8;
   */
  ORDERED_LIST_ITEM = 8,

  /**
   * @generated from enum value: UNORDERED_LIST_ITEM = 9;
   */
  UNORDERED_LIST_ITEM = 9,

  /**
   * @generated from enum value: TASK_LIST_ITEM = 10;
   */
  TASK_LIST_ITEM = 10,

  /**
   * @generated from enum value: MATH_BLOCK = 11;
   */
  MATH_BLOCK = 11,

  /**
   * @generated from enum value: TABLE = 12;
   */
  TABLE = 12,

  /**
   * @generated from enum value: EMBEDDED_CONTENT = 13;
   */
  EMBEDDED_CONTENT = 13,

  /**
   * Inline nodes.
   *
   * @generated from enum value: TEXT = 51;
   */
  TEXT = 51,

  /**
   * @generated from enum value: BOLD = 52;
   */
  BOLD = 52,

  /**
   * @generated from enum value: ITALIC = 53;
   */
  ITALIC = 53,

  /**
   * @generated from enum value: BOLD_ITALIC = 54;
   */
  BOLD_ITALIC = 54,

  /**
   * @generated from enum value: CODE = 55;
   */
  CODE = 55,

  /**
   * @generated from enum value: IMAGE = 56;
   */
  IMAGE = 56,

  /**
   * @generated from enum value: LINK = 57;
   */
  LINK = 57,

  /**
   * @generated from enum value: AUTO_LINK = 58;
   */
  AUTO_LINK = 58,

  /**
   * @generated from enum value: TAG = 59;
   */
  TAG = 59,

  /**
   * @generated from enum value: STRIKETHROUGH = 60;
   */
  STRIKETHROUGH = 60,

  /**
   * @generated from enum value: ESCAPING_CHARACTER = 61;
   */
  ESCAPING_CHARACTER = 61,

  /**
   * @generated from enum value: MATH = 62;
   */
  MATH = 62,

  /**
   * @generated from enum value: HIGHLIGHT = 63;
   */
  HIGHLIGHT = 63,

  /**
   * @generated from enum value: SUBSCRIPT = 64;
   */
  SUBSCRIPT = 64,

  /**
   * @generated from enum value: SUPERSCRIPT = 65;
   */
  SUPERSCRIPT = 65,

  /**
   * @generated from enum value: REFERENCED_CONTENT = 66;
   */
  REFERENCED_CONTENT = 66,

  /**
   * @generated from enum value: SPOILER = 67;
   */
  SPOILER = 67,

  /**
   * @generated from enum value: HTML_ELEMENT = 68;
   */
  HTML_ELEMENT = 68,
}

/**
 * Describes the enum markdown.NodeType.
 */
export const NodeTypeSchema: GenEnum<NodeType> = /*@__PURE__*/
  enumDesc(file_model_markdown_markdown, 0);

