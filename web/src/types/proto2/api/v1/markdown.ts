// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/markdown.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { LinkMetadata, Node } from "../../model/markdown/markdown";

export const protobufPackage = "api.v1";

export interface ParseMarkdownRequest {
  markdown: string;
}

export interface ParseMarkdownResponse {
  nodes: Node[];
}

export interface RestoreMarkdownNodesRequest {
  nodes: Node[];
}

export interface RestoreMarkdownNodesResponse {
  markdown: string;
}

export interface StringifyMarkdownNodesRequest {
  nodes: Node[];
}

export interface StringifyMarkdownNodesResponse {
  plainText: string;
}

export interface GetLinkMetadataRequest {
  link: string;
}

function createBaseParseMarkdownRequest(): ParseMarkdownRequest {
  return { markdown: "" };
}

export const ParseMarkdownRequest: MessageFns<ParseMarkdownRequest> = {
  encode(message: ParseMarkdownRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.markdown !== "") {
      writer.uint32(10).string(message.markdown);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParseMarkdownRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParseMarkdownRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.markdown = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ParseMarkdownRequest>): ParseMarkdownRequest {
    return ParseMarkdownRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParseMarkdownRequest>): ParseMarkdownRequest {
    const message = createBaseParseMarkdownRequest();
    message.markdown = object.markdown ?? "";
    return message;
  },
};

function createBaseParseMarkdownResponse(): ParseMarkdownResponse {
  return { nodes: [] };
}

export const ParseMarkdownResponse: MessageFns<ParseMarkdownResponse> = {
  encode(message: ParseMarkdownResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nodes) {
      Node.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParseMarkdownResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParseMarkdownResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nodes.push(Node.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ParseMarkdownResponse>): ParseMarkdownResponse {
    return ParseMarkdownResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParseMarkdownResponse>): ParseMarkdownResponse {
    const message = createBaseParseMarkdownResponse();
    message.nodes = object.nodes?.map((e) => Node.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRestoreMarkdownNodesRequest(): RestoreMarkdownNodesRequest {
  return { nodes: [] };
}

export const RestoreMarkdownNodesRequest: MessageFns<RestoreMarkdownNodesRequest> = {
  encode(message: RestoreMarkdownNodesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nodes) {
      Node.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreMarkdownNodesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreMarkdownNodesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nodes.push(Node.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RestoreMarkdownNodesRequest>): RestoreMarkdownNodesRequest {
    return RestoreMarkdownNodesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreMarkdownNodesRequest>): RestoreMarkdownNodesRequest {
    const message = createBaseRestoreMarkdownNodesRequest();
    message.nodes = object.nodes?.map((e) => Node.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRestoreMarkdownNodesResponse(): RestoreMarkdownNodesResponse {
  return { markdown: "" };
}

export const RestoreMarkdownNodesResponse: MessageFns<RestoreMarkdownNodesResponse> = {
  encode(message: RestoreMarkdownNodesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.markdown !== "") {
      writer.uint32(10).string(message.markdown);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RestoreMarkdownNodesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRestoreMarkdownNodesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.markdown = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RestoreMarkdownNodesResponse>): RestoreMarkdownNodesResponse {
    return RestoreMarkdownNodesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RestoreMarkdownNodesResponse>): RestoreMarkdownNodesResponse {
    const message = createBaseRestoreMarkdownNodesResponse();
    message.markdown = object.markdown ?? "";
    return message;
  },
};

function createBaseStringifyMarkdownNodesRequest(): StringifyMarkdownNodesRequest {
  return { nodes: [] };
}

export const StringifyMarkdownNodesRequest: MessageFns<StringifyMarkdownNodesRequest> = {
  encode(message: StringifyMarkdownNodesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.nodes) {
      Node.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StringifyMarkdownNodesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStringifyMarkdownNodesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.nodes.push(Node.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<StringifyMarkdownNodesRequest>): StringifyMarkdownNodesRequest {
    return StringifyMarkdownNodesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StringifyMarkdownNodesRequest>): StringifyMarkdownNodesRequest {
    const message = createBaseStringifyMarkdownNodesRequest();
    message.nodes = object.nodes?.map((e) => Node.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStringifyMarkdownNodesResponse(): StringifyMarkdownNodesResponse {
  return { plainText: "" };
}

export const StringifyMarkdownNodesResponse: MessageFns<StringifyMarkdownNodesResponse> = {
  encode(message: StringifyMarkdownNodesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.plainText !== "") {
      writer.uint32(10).string(message.plainText);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StringifyMarkdownNodesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStringifyMarkdownNodesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.plainText = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<StringifyMarkdownNodesResponse>): StringifyMarkdownNodesResponse {
    return StringifyMarkdownNodesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StringifyMarkdownNodesResponse>): StringifyMarkdownNodesResponse {
    const message = createBaseStringifyMarkdownNodesResponse();
    message.plainText = object.plainText ?? "";
    return message;
  },
};

function createBaseGetLinkMetadataRequest(): GetLinkMetadataRequest {
  return { link: "" };
}

export const GetLinkMetadataRequest: MessageFns<GetLinkMetadataRequest> = {
  encode(message: GetLinkMetadataRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.link !== "") {
      writer.uint32(10).string(message.link);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetLinkMetadataRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetLinkMetadataRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.link = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetLinkMetadataRequest>): GetLinkMetadataRequest {
    return GetLinkMetadataRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetLinkMetadataRequest>): GetLinkMetadataRequest {
    const message = createBaseGetLinkMetadataRequest();
    message.link = object.link ?? "";
    return message;
  },
};

export type MarkdownServiceDefinition = typeof MarkdownServiceDefinition;
export const MarkdownServiceDefinition = {
  name: "MarkdownService",
  fullName: "api.v1.MarkdownService",
  methods: {
    /** ParseMarkdown parses the given markdown content and returns a list of nodes. */
    parseMarkdown: {
      name: "ParseMarkdown",
      requestType: ParseMarkdownRequest,
      requestStream: false,
      responseType: ParseMarkdownResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              27,
              58,
              1,
              42,
              34,
              22,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              109,
              97,
              114,
              107,
              100,
              111,
              119,
              110,
              58,
              112,
              97,
              114,
              115,
              101,
            ]),
          ],
        },
      },
    },
    /** RestoreMarkdownNodes restores the given nodes to markdown content. */
    restoreMarkdownNodes: {
      name: "RestoreMarkdownNodes",
      requestType: RestoreMarkdownNodesRequest,
      requestStream: false,
      responseType: RestoreMarkdownNodesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              34,
              58,
              1,
              42,
              34,
              29,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              109,
              97,
              114,
              107,
              100,
              111,
              119,
              110,
              47,
              110,
              111,
              100,
              101,
              58,
              114,
              101,
              115,
              116,
              111,
              114,
              101,
            ]),
          ],
        },
      },
    },
    /** StringifyMarkdownNodes stringify the given nodes to plain text content. */
    stringifyMarkdownNodes: {
      name: "StringifyMarkdownNodes",
      requestType: StringifyMarkdownNodesRequest,
      requestStream: false,
      responseType: StringifyMarkdownNodesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              36,
              58,
              1,
              42,
              34,
              31,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              109,
              97,
              114,
              107,
              100,
              111,
              119,
              110,
              47,
              110,
              111,
              100,
              101,
              58,
              115,
              116,
              114,
              105,
              110,
              103,
              105,
              102,
              121,
            ]),
          ],
        },
      },
    },
    /** GetLinkMetadata returns metadata for a given link. */
    getLinkMetadata: {
      name: "GetLinkMetadata",
      requestType: GetLinkMetadataRequest,
      requestStream: false,
      responseType: LinkMetadata,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              32,
              18,
              30,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              109,
              97,
              114,
              107,
              100,
              111,
              119,
              110,
              47,
              108,
              105,
              110,
              107,
              58,
              109,
              101,
              116,
              97,
              100,
              97,
              116,
              97,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
