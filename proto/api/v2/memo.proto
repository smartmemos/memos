syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "model/user.proto";
import "model/common.proto";
import "model/memo.proto";
import "model/reaction.proto";

package api.v2;
option go_package = "github.com/smartmemos/memos/internal/proto/api/v2";

service MemoService {
  // CreateMemo creates a memo.
  rpc CreateMemo(CreateMemoRequest) returns (model.Memo) {}

  // ListMemos lists memos with pagination and filter.
  rpc ListMemos(ListMemosRequest) returns (ListMemosResponse) {}

  // GetMemo gets a memo.
  rpc GetMemo(GetMemoRequest) returns (model.Memo) {}

  // UpdateMemo updates a memo.
  rpc UpdateMemo(UpdateMemoRequest) returns (model.Memo) {}

  // DeleteMemo deletes a memo.
  rpc DeleteMemo(DeleteMemoRequest) returns (google.protobuf.Empty) {}

  // UpsertMemoReaction upserts a reaction for a memo.
  rpc UpsertMemoReaction(UpsertMemoReactionRequest) returns (model.Reaction) {}

  // DeleteMemoReaction deletes a reaction for a memo.
  rpc DeleteMemoReaction(DeleteMemoReactionRequest) returns (google.protobuf.Empty) {}
}

message CreateMemoRequest {
  // Required. The memo to create.
  model.Memo memo = 1;

  // Optional. The memo ID to use for this memo.
  // If empty, a unique ID will be generated.
  string memo_id = 2;

  // Optional. If set, validate the request but don't actually create the memo.
  bool validate_only = 3;

  // Optional. An idempotency token.
  string request_id = 4;
}

message ListMemosRequest {
  // Optional. The maximum number of memos to return.
  // The service may return fewer than this value.
  // If unspecified, at most 50 memos will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // Optional. A page token, received from a previous `ListMemos` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 2;

  // Optional. The state of the memos to list.
  // Default to `NORMAL`. Set to `ARCHIVED` to list archived memos.
  model.State state = 3;

  // Optional. The order to sort results by.
  // Default to "display_time desc".
  // Example: "display_time desc" or "create_time asc"
  string order_by = 4;

  // Optional. Filter to apply to the list results.
  // Filter is a CEL expression to filter memos.
  // Refer to `Shortcut.filter`.
  string filter = 5;

  // Optional. If true, show deleted memos in the response.
  bool show_deleted = 6;
}

message ListMemosResponse {
  // The list of memos.
  repeated model.Memo memos = 1;

  // A token that can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;

  // The total count of memos (may be approximate).
  int32 total_size = 3;
}

message GetMemoRequest {
  // Required. The resource name of the memo.
  // Format: memos/{memo}
  string name = 1;

  // Optional. The fields to return in the response.
  // If not specified, all fields are returned.
  google.protobuf.FieldMask read_mask = 2;
}

message UpdateMemoRequest {
  // Required. The memo to update.
  // The `name` field is required.
  model.Memo memo = 1;

  // Required. The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;

  // Optional. If set to true, allows updating sensitive fields.
  bool allow_missing = 3;
}

message DeleteMemoRequest {
  // Required. The resource name of the memo to delete.
  // Format: memos/{memo}
  string name = 1;

  // Optional. If set to true, the memo will be deleted even if it has associated data.
  bool force = 2;
}


message UpsertMemoReactionRequest {
  // Required. The resource name of the memo.
  // Format: memos/{memo}
  string name = 1;

  // Required. The reaction to upsert.
  model.Reaction reaction = 2;
}

message DeleteMemoReactionRequest {
  // Required. The resource name of the reaction to delete.
  // Format: reactions/{reaction}
  string name = 1;
}
