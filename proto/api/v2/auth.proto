syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "model/user.proto";

package api.v2;
option go_package = "github.com/smartmemos/memos/internal/proto/api/v2";

service AuthService {
  // GetCurrentSession returns the current session information.
  rpc GetCurrentSession(GetCurrentSessionRequest) returns (GetCurrentSessionResponse) {}

  // CreateSession authenticates a user and creates a new session.
  // Returns the authenticated user information upon successful authentication.
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse) {}
}

message GetCurrentSessionRequest {}

message GetCurrentSessionResponse {
  model.User user = 1;

  // Last time the session was accessed.
  // Used for sliding expiration calculation (last_accessed_time + 2 weeks).
  google.protobuf.Timestamp last_accessed_at = 2;
}

message CreateSessionRequest {
  // Nested message for password-based authentication credentials.
  message PasswordCredentials {
    // The username to sign in with.
    // Required field for password-based authentication.
    string username = 1 ;

    // The password to sign in with.
    // Required field for password-based authentication.
    string password = 2;
  }

  // Nested message for SSO authentication credentials.
  message SSOCredentials {
    // The ID of the SSO provider.
    // Required field to identify the SSO provider.
    int32 idp_id = 1;

    // The authorization code from the SSO provider.
    // Required field for completing the SSO flow.
    string code = 2;

    // The redirect URI used in the SSO flow.
    // Required field for security validation.
    string redirect_uri = 3;
  }

  // Provide one authentication method (username/password or SSO).
  // Required field to specify the authentication method.
  oneof credentials {
    // Username and password authentication method.
    PasswordCredentials password_credentials = 1;

    // SSO provider authentication method.
    SSOCredentials sso_credentials = 2;
  }
}

message CreateSessionResponse {
  // The authenticated user information.
  model.User user = 1;

  // Last time the session was accessed.
  // Used for sliding expiration calculation (last_accessed_time + 2 weeks).
  google.protobuf.Timestamp last_accessed_at = 2;
}

message SignInRequest {
  // The username to sign in with.
  string username = 1;
  // The password to sign in with.
  string password = 2;
  // Whether the session should never expire.
  bool never_expire = 3;
}

message SignUpRequest {
  // The username to sign up with.
  string username = 1;
  // The password to sign up with.
  string password = 2;
}

message SignOutRequest {}

message GetAuthStatusRequest {}

message GetAuthStatusResponse {
  model.User user = 1;
}