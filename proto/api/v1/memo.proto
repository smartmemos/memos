syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "model/memo/memo.proto";
import "model/common/common.proto";

package api.v1;
option go_package = "github.com/smartmemos/memos/internal/proto/api/v1";

service MemoService {
    // CreateMemo creates a memo.
  rpc CreateMemo(CreateMemoRequest) returns (memo.Memo) {
    option (google.api.http) = {
      post: "/api/v1/memos"
    };
  }

    // ListMemos lists memos with pagination and filter.
  rpc ListMemos(ListMemosRequest) returns (ListMemosResponse) {
    option (google.api.http) = {
      get: "/api/v1/memos"
    };
  }
  // GetMemo gets a memo.
  rpc GetMemo(GetMemoRequest) returns (memo.Memo) {
    option (google.api.http) = {get: "/api/v1/memos/*"};
  }

}


message CreateMemoRequest {
    // The memo to create.
  memo.Memo memo = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListMemosRequest {
  // The parent is the owner of the memos.
  // If not specified or `users/-`, it will list all memos.
  string parent = 1;

  // The maximum number of memos to return.
  int32 page_size = 2;

  // A page token, received from a previous `ListMemos` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 3;

  // The state of the memos to list.
  // Default to `NORMAL`. Set to `ARCHIVED` to list archived memos.
  common.State state = 4;

  // What field to sort the results by.
  // Default to display_time.
  string sort = 5;

  // The direction to sort the results by.
  // Default to DESC.
  common.Direction direction = 6;

  // Filter is a CEL expression to filter memos.
  // Refer to `Shortcut.filter`.
  string filter = 7;

  // [Deprecated] Old filter contains some specific conditions to filter memos.
  // Format: "creator == 'users/{user}' && visibilities == ['PUBLIC', 'PROTECTED']"
  string old_filter = 8;
}

message ListMemosResponse {
  repeated memo.Memo memos = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message GetMemoRequest {

}