syntax = "proto3";

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "model/markdown/markdown.proto";

package api.v1;
option go_package = "github.com/smartmemos/memos/internal/proto/api/v1";

service MarkdownService {
  // ParseMarkdown parses the given markdown content and returns a list of nodes.
  rpc ParseMarkdown(ParseMarkdownRequest) returns (ParseMarkdownResponse) {
    option (google.api.http) = {
      post: "/api/v1/markdown:parse"
      body: "*"
    };
  }
  // RestoreMarkdownNodes restores the given nodes to markdown content.
  rpc RestoreMarkdownNodes(RestoreMarkdownNodesRequest) returns (RestoreMarkdownNodesResponse) {
    option (google.api.http) = {
      post: "/api/v1/markdown/node:restore"
      body: "*"
    };
  }
  // StringifyMarkdownNodes stringify the given nodes to plain text content.
  rpc StringifyMarkdownNodes(StringifyMarkdownNodesRequest) returns (StringifyMarkdownNodesResponse) {
    option (google.api.http) = {
      post: "/api/v1/markdown/node:stringify"
      body: "*"
    };
  }
  // GetLinkMetadata returns metadata for a given link.
  rpc GetLinkMetadata(GetLinkMetadataRequest) returns (markdown.LinkMetadata) {
    option (google.api.http) = {get: "/api/v1/markdown/link:metadata"};
  }
}

message ParseMarkdownRequest {
  string markdown = 1;
}

message ParseMarkdownResponse {
  repeated markdown.Node nodes = 1;
}

message RestoreMarkdownNodesRequest {
  repeated markdown.Node nodes = 1;
}

message RestoreMarkdownNodesResponse {
  string markdown = 1;
}

message StringifyMarkdownNodesRequest {
  repeated markdown.Node nodes = 1;
}

message StringifyMarkdownNodesResponse {
  string plain_text = 1;
}

message GetLinkMetadataRequest {
  string link = 1;
}

