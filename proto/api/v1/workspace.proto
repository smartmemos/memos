syntax = "proto3";

package api.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "model/workspace/setting.proto";
import "model/workspace/profile.proto";
import "model/workspace/identity_provider.proto";
import "model/workspace/inbox.proto";

option go_package = "github.com/smartmemos/memos/internal/proto/api/v1";

service WorkspaceService {
  // GetProfile returns the workspace profile.
  rpc GetWorkspaceProfile(GetWorkspaceProfileRequest) returns (workspace.Profile) {
    option (google.api.http) = {get: "/api/v1/workspace/profile"};
  }

  // GetWorkspaceSetting returns the setting by name.
  rpc GetWorkspaceSetting(GetWorkspaceSettingRequest) returns (workspace.Setting) {
    option (google.api.http) = {get: "/api/v1/workspace/{name=settings/*}"};
    option (google.api.method_signature) = "name";
  }
  // SetWorkspaceSetting updates the setting.
  rpc SetWorkspaceSetting(SetWorkspaceSettingRequest) returns (workspace.Setting) {
    option (google.api.http) = {
      patch: "/api/v1/workspace/{setting.name=settings/*}"
      body: "setting"
    };
    option (google.api.method_signature) = "setting";
  }

    // ListIdentityProviders lists identity providers.
  rpc ListIdentityProviders(ListIdentityProvidersRequest) returns (ListIdentityProvidersResponse) {
    option (google.api.http) = {get: "/api/v1/identityProviders"};
  }
  // GetIdentityProvider gets an identity provider.
  rpc GetIdentityProvider(GetIdentityProviderRequest) returns (workspace.IdentityProvider) {
    option (google.api.http) = {get: "/api/v1/{name=identityProviders/*}"};
    option (google.api.method_signature) = "name";
  }

  // ListInboxes lists inboxes for a user.
  rpc ListInboxes(ListInboxesRequest) returns (ListInboxesResponse) {
    option (google.api.http) = {get: "/api/v1/inboxes"};
  }
  // UpdateInbox updates an inbox.
  rpc UpdateInbox(UpdateInboxRequest) returns (workspace.Inbox) {
    option (google.api.http) = {
      patch: "/api/v1/{inbox.name=inboxes/*}"
      body: "inbox"
    };
    option (google.api.method_signature) = "inbox,update_mask";
  }
  // DeleteInbox deletes an inbox.
  rpc DeleteInbox(DeleteInboxRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/api/v1/{name=inboxes/*}"};
    option (google.api.method_signature) = "name";
  }
}

message ListIdentityProvidersRequest {}

message ListIdentityProvidersResponse {
  repeated workspace.IdentityProvider identity_providers = 1;
}

message GetIdentityProviderRequest {
  // The name of the identityProvider to get.
  string name = 1;
}

message GetWorkspaceProfileRequest {}

message GetWorkspaceSettingRequest {
  // The resource name of the workspace setting.
  // Format: settings/{setting}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message SetWorkspaceSettingRequest {
  // setting is the setting to update.
  workspace.Setting setting = 1;
}

message ListInboxesRequest {
  // Format: users/{user}
  string user = 1;

  // The maximum number of inbox to return.
  int32 page_size = 2;

  // Provide this to retrieve the subsequent page.
  string page_token = 3;
}

message ListInboxesResponse {
  repeated workspace.Inbox inboxes = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message UpdateInboxRequest {
  workspace.Inbox inbox = 1;

  google.protobuf.FieldMask update_mask = 2;
}

message DeleteInboxRequest {
  // The name of the inbox to delete.
  string name = 1;
}
