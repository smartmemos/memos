// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package memos is a generated GoMock package.
package memos

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/smartmemos/memos/internal/memos/model"
)

// MockDAO is a mock of DAO interface.
type MockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDAOMockRecorder
}

// MockDAOMockRecorder is the mock recorder for MockDAO.
type MockDAOMockRecorder struct {
	mock *MockDAO
}

// NewMockDAO creates a new mock instance.
func NewMockDAO(ctrl *gomock.Controller) *MockDAO {
	mock := &MockDAO{ctrl: ctrl}
	mock.recorder = &MockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAO) EXPECT() *MockDAOMockRecorder {
	return m.recorder
}

// CountAttachments mocks base method.
func (m *MockDAO) CountAttachments(ctx context.Context, filter *model.FindAttachmentFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAttachments", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAttachments indicates an expected call of CountAttachments.
func (mr *MockDAOMockRecorder) CountAttachments(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAttachments", reflect.TypeOf((*MockDAO)(nil).CountAttachments), ctx, filter)
}

// CountInboxes mocks base method.
func (m *MockDAO) CountInboxes(ctx context.Context, filter *model.FindInboxFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountInboxes", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountInboxes indicates an expected call of CountInboxes.
func (mr *MockDAOMockRecorder) CountInboxes(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountInboxes", reflect.TypeOf((*MockDAO)(nil).CountInboxes), ctx, filter)
}

// CountMemoRelations mocks base method.
func (m *MockDAO) CountMemoRelations(ctx context.Context, filter *model.FindMemoRelationFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMemoRelations", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMemoRelations indicates an expected call of CountMemoRelations.
func (mr *MockDAOMockRecorder) CountMemoRelations(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMemoRelations", reflect.TypeOf((*MockDAO)(nil).CountMemoRelations), ctx, filter)
}

// CountMemos mocks base method.
func (m *MockDAO) CountMemos(ctx context.Context, filter *model.MemoFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMemos", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMemos indicates an expected call of CountMemos.
func (mr *MockDAOMockRecorder) CountMemos(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMemos", reflect.TypeOf((*MockDAO)(nil).CountMemos), ctx, filter)
}

// CountReactions mocks base method.
func (m *MockDAO) CountReactions(ctx context.Context, filter *model.FindReactionFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountReactions", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountReactions indicates an expected call of CountReactions.
func (mr *MockDAOMockRecorder) CountReactions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountReactions", reflect.TypeOf((*MockDAO)(nil).CountReactions), ctx, filter)
}

// CountUsers mocks base method.
func (m *MockDAO) CountUsers(ctx context.Context, filter *model.FindUserFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockDAOMockRecorder) CountUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockDAO)(nil).CountUsers), ctx, filter)
}

// CreateAttachment mocks base method.
func (m_2 *MockDAO) CreateAttachment(ctx context.Context, m *model.Attachment) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateAttachment", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAttachment indicates an expected call of CreateAttachment.
func (mr *MockDAOMockRecorder) CreateAttachment(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttachment", reflect.TypeOf((*MockDAO)(nil).CreateAttachment), ctx, m)
}

// CreateInbox mocks base method.
func (m_2 *MockDAO) CreateInbox(ctx context.Context, m *model.Inbox) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateInbox", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInbox indicates an expected call of CreateInbox.
func (mr *MockDAOMockRecorder) CreateInbox(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInbox", reflect.TypeOf((*MockDAO)(nil).CreateInbox), ctx, m)
}

// CreateMemo mocks base method.
func (m_2 *MockDAO) CreateMemo(ctx context.Context, m *model.Memo) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateMemo", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMemo indicates an expected call of CreateMemo.
func (mr *MockDAOMockRecorder) CreateMemo(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemo", reflect.TypeOf((*MockDAO)(nil).CreateMemo), ctx, m)
}

// CreateMemoRelation mocks base method.
func (m_2 *MockDAO) CreateMemoRelation(ctx context.Context, m *model.MemoRelation) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateMemoRelation", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMemoRelation indicates an expected call of CreateMemoRelation.
func (mr *MockDAOMockRecorder) CreateMemoRelation(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemoRelation", reflect.TypeOf((*MockDAO)(nil).CreateMemoRelation), ctx, m)
}

// CreateReaction mocks base method.
func (m_2 *MockDAO) CreateReaction(ctx context.Context, m *model.Reaction) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateReaction", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReaction indicates an expected call of CreateReaction.
func (mr *MockDAOMockRecorder) CreateReaction(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReaction", reflect.TypeOf((*MockDAO)(nil).CreateReaction), ctx, m)
}

// CreateSession mocks base method.
func (m_2 *MockDAO) CreateSession(ctx context.Context, m *model.Session) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateSession", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockDAOMockRecorder) CreateSession(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockDAO)(nil).CreateSession), ctx, m)
}

// CreateSystemSetting mocks base method.
func (m_2 *MockDAO) CreateSystemSetting(ctx context.Context, m *model.SystemSetting) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateSystemSetting", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSystemSetting indicates an expected call of CreateSystemSetting.
func (mr *MockDAOMockRecorder) CreateSystemSetting(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSystemSetting", reflect.TypeOf((*MockDAO)(nil).CreateSystemSetting), ctx, m)
}

// CreateUser mocks base method.
func (m_2 *MockDAO) CreateUser(ctx context.Context, m *model.User) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateUser", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDAOMockRecorder) CreateUser(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDAO)(nil).CreateUser), ctx, m)
}

// CreateUserSetting mocks base method.
func (m_2 *MockDAO) CreateUserSetting(ctx context.Context, m *model.UserSetting) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateUserSetting", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserSetting indicates an expected call of CreateUserSetting.
func (mr *MockDAOMockRecorder) CreateUserSetting(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserSetting", reflect.TypeOf((*MockDAO)(nil).CreateUserSetting), ctx, m)
}

// DeleteAttachments mocks base method.
func (m *MockDAO) DeleteAttachments(ctx context.Context, filter *model.FindAttachmentFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAttachments", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAttachments indicates an expected call of DeleteAttachments.
func (mr *MockDAOMockRecorder) DeleteAttachments(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttachments", reflect.TypeOf((*MockDAO)(nil).DeleteAttachments), ctx, filter)
}

// DeleteInboxes mocks base method.
func (m *MockDAO) DeleteInboxes(ctx context.Context, filter *model.FindInboxFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInboxes", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInboxes indicates an expected call of DeleteInboxes.
func (mr *MockDAOMockRecorder) DeleteInboxes(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInboxes", reflect.TypeOf((*MockDAO)(nil).DeleteInboxes), ctx, filter)
}

// DeleteMemoRelations mocks base method.
func (m *MockDAO) DeleteMemoRelations(ctx context.Context, filter *model.FindMemoRelationFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemoRelations", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMemoRelations indicates an expected call of DeleteMemoRelations.
func (mr *MockDAOMockRecorder) DeleteMemoRelations(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemoRelations", reflect.TypeOf((*MockDAO)(nil).DeleteMemoRelations), ctx, filter)
}

// DeleteMemos mocks base method.
func (m *MockDAO) DeleteMemos(ctx context.Context, filter *model.MemoFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemos", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMemos indicates an expected call of DeleteMemos.
func (mr *MockDAOMockRecorder) DeleteMemos(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemos", reflect.TypeOf((*MockDAO)(nil).DeleteMemos), ctx, filter)
}

// DeleteReactions mocks base method.
func (m *MockDAO) DeleteReactions(ctx context.Context, filter *model.FindReactionFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReactions", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReactions indicates an expected call of DeleteReactions.
func (mr *MockDAOMockRecorder) DeleteReactions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReactions", reflect.TypeOf((*MockDAO)(nil).DeleteReactions), ctx, filter)
}

// DeleteSystemSettings mocks base method.
func (m *MockDAO) DeleteSystemSettings(ctx context.Context, filter *model.FindSystemSettingFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSystemSettings", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSystemSettings indicates an expected call of DeleteSystemSettings.
func (mr *MockDAOMockRecorder) DeleteSystemSettings(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSystemSettings", reflect.TypeOf((*MockDAO)(nil).DeleteSystemSettings), ctx, filter)
}

// DeleteUserSettings mocks base method.
func (m *MockDAO) DeleteUserSettings(ctx context.Context, filter *model.FindUserSettingFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSettings", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSettings indicates an expected call of DeleteUserSettings.
func (mr *MockDAOMockRecorder) DeleteUserSettings(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSettings", reflect.TypeOf((*MockDAO)(nil).DeleteUserSettings), ctx, filter)
}

// DeleteUsers mocks base method.
func (m *MockDAO) DeleteUsers(ctx context.Context, filter *model.FindUserFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsers", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsers indicates an expected call of DeleteUsers.
func (mr *MockDAOMockRecorder) DeleteUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsers", reflect.TypeOf((*MockDAO)(nil).DeleteUsers), ctx, filter)
}

// FindAttachment mocks base method.
func (m *MockDAO) FindAttachment(ctx context.Context, filter *model.FindAttachmentFilter) (*model.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAttachment", ctx, filter)
	ret0, _ := ret[0].(*model.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAttachment indicates an expected call of FindAttachment.
func (mr *MockDAOMockRecorder) FindAttachment(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAttachment", reflect.TypeOf((*MockDAO)(nil).FindAttachment), ctx, filter)
}

// FindAttachmentByID mocks base method.
func (m *MockDAO) FindAttachmentByID(ctx context.Context, id int64) (*model.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAttachmentByID", ctx, id)
	ret0, _ := ret[0].(*model.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAttachmentByID indicates an expected call of FindAttachmentByID.
func (mr *MockDAOMockRecorder) FindAttachmentByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAttachmentByID", reflect.TypeOf((*MockDAO)(nil).FindAttachmentByID), ctx, id)
}

// FindAttachments mocks base method.
func (m *MockDAO) FindAttachments(ctx context.Context, filter *model.FindAttachmentFilter) ([]*model.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAttachments", ctx, filter)
	ret0, _ := ret[0].([]*model.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAttachments indicates an expected call of FindAttachments.
func (mr *MockDAOMockRecorder) FindAttachments(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAttachments", reflect.TypeOf((*MockDAO)(nil).FindAttachments), ctx, filter)
}

// FindInbox mocks base method.
func (m *MockDAO) FindInbox(ctx context.Context, filter *model.FindInboxFilter) (*model.Inbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInbox", ctx, filter)
	ret0, _ := ret[0].(*model.Inbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInbox indicates an expected call of FindInbox.
func (mr *MockDAOMockRecorder) FindInbox(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInbox", reflect.TypeOf((*MockDAO)(nil).FindInbox), ctx, filter)
}

// FindInboxByID mocks base method.
func (m *MockDAO) FindInboxByID(ctx context.Context, id int64) (*model.Inbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInboxByID", ctx, id)
	ret0, _ := ret[0].(*model.Inbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInboxByID indicates an expected call of FindInboxByID.
func (mr *MockDAOMockRecorder) FindInboxByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInboxByID", reflect.TypeOf((*MockDAO)(nil).FindInboxByID), ctx, id)
}

// FindInboxes mocks base method.
func (m *MockDAO) FindInboxes(ctx context.Context, filter *model.FindInboxFilter) ([]*model.Inbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindInboxes", ctx, filter)
	ret0, _ := ret[0].([]*model.Inbox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindInboxes indicates an expected call of FindInboxes.
func (mr *MockDAOMockRecorder) FindInboxes(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindInboxes", reflect.TypeOf((*MockDAO)(nil).FindInboxes), ctx, filter)
}

// FindMemo mocks base method.
func (m *MockDAO) FindMemo(ctx context.Context, filter *model.MemoFilter) (*model.Memo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMemo", ctx, filter)
	ret0, _ := ret[0].(*model.Memo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMemo indicates an expected call of FindMemo.
func (mr *MockDAOMockRecorder) FindMemo(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMemo", reflect.TypeOf((*MockDAO)(nil).FindMemo), ctx, filter)
}

// FindMemoByID mocks base method.
func (m *MockDAO) FindMemoByID(ctx context.Context, id int64) (*model.Memo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMemoByID", ctx, id)
	ret0, _ := ret[0].(*model.Memo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMemoByID indicates an expected call of FindMemoByID.
func (mr *MockDAOMockRecorder) FindMemoByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMemoByID", reflect.TypeOf((*MockDAO)(nil).FindMemoByID), ctx, id)
}

// FindMemoRelation mocks base method.
func (m *MockDAO) FindMemoRelation(ctx context.Context, filter *model.FindMemoRelationFilter) (*model.MemoRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMemoRelation", ctx, filter)
	ret0, _ := ret[0].(*model.MemoRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMemoRelation indicates an expected call of FindMemoRelation.
func (mr *MockDAOMockRecorder) FindMemoRelation(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMemoRelation", reflect.TypeOf((*MockDAO)(nil).FindMemoRelation), ctx, filter)
}

// FindMemoRelations mocks base method.
func (m *MockDAO) FindMemoRelations(ctx context.Context, filter *model.FindMemoRelationFilter) ([]*model.MemoRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMemoRelations", ctx, filter)
	ret0, _ := ret[0].([]*model.MemoRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMemoRelations indicates an expected call of FindMemoRelations.
func (mr *MockDAOMockRecorder) FindMemoRelations(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMemoRelations", reflect.TypeOf((*MockDAO)(nil).FindMemoRelations), ctx, filter)
}

// FindMemos mocks base method.
func (m *MockDAO) FindMemos(ctx context.Context, filter *model.MemoFilter) ([]*model.Memo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMemos", ctx, filter)
	ret0, _ := ret[0].([]*model.Memo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMemos indicates an expected call of FindMemos.
func (mr *MockDAOMockRecorder) FindMemos(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMemos", reflect.TypeOf((*MockDAO)(nil).FindMemos), ctx, filter)
}

// FindReaction mocks base method.
func (m *MockDAO) FindReaction(ctx context.Context, filter *model.FindReactionFilter) (*model.Reaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReaction", ctx, filter)
	ret0, _ := ret[0].(*model.Reaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReaction indicates an expected call of FindReaction.
func (mr *MockDAOMockRecorder) FindReaction(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReaction", reflect.TypeOf((*MockDAO)(nil).FindReaction), ctx, filter)
}

// FindReactionByID mocks base method.
func (m *MockDAO) FindReactionByID(ctx context.Context, id int64) (*model.Reaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReactionByID", ctx, id)
	ret0, _ := ret[0].(*model.Reaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReactionByID indicates an expected call of FindReactionByID.
func (mr *MockDAOMockRecorder) FindReactionByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReactionByID", reflect.TypeOf((*MockDAO)(nil).FindReactionByID), ctx, id)
}

// FindReactions mocks base method.
func (m *MockDAO) FindReactions(ctx context.Context, filter *model.FindReactionFilter) ([]*model.Reaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindReactions", ctx, filter)
	ret0, _ := ret[0].([]*model.Reaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindReactions indicates an expected call of FindReactions.
func (mr *MockDAOMockRecorder) FindReactions(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindReactions", reflect.TypeOf((*MockDAO)(nil).FindReactions), ctx, filter)
}

// FindSystemSetting mocks base method.
func (m *MockDAO) FindSystemSetting(ctx context.Context, filter *model.FindSystemSettingFilter) (*model.SystemSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSystemSetting", ctx, filter)
	ret0, _ := ret[0].(*model.SystemSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSystemSetting indicates an expected call of FindSystemSetting.
func (mr *MockDAOMockRecorder) FindSystemSetting(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSystemSetting", reflect.TypeOf((*MockDAO)(nil).FindSystemSetting), ctx, filter)
}

// FindSystemSettings mocks base method.
func (m *MockDAO) FindSystemSettings(ctx context.Context, filter *model.FindSystemSettingFilter) ([]*model.SystemSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSystemSettings", ctx, filter)
	ret0, _ := ret[0].([]*model.SystemSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSystemSettings indicates an expected call of FindSystemSettings.
func (mr *MockDAOMockRecorder) FindSystemSettings(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSystemSettings", reflect.TypeOf((*MockDAO)(nil).FindSystemSettings), ctx, filter)
}

// FindUser mocks base method.
func (m *MockDAO) FindUser(ctx context.Context, filter *model.FindUserFilter) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, filter)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockDAOMockRecorder) FindUser(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockDAO)(nil).FindUser), ctx, filter)
}

// FindUserByID mocks base method.
func (m *MockDAO) FindUserByID(ctx context.Context, id int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockDAOMockRecorder) FindUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockDAO)(nil).FindUserByID), ctx, id)
}

// FindUserSetting mocks base method.
func (m *MockDAO) FindUserSetting(ctx context.Context, filter *model.FindUserSettingFilter) (*model.UserSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserSetting", ctx, filter)
	ret0, _ := ret[0].(*model.UserSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserSetting indicates an expected call of FindUserSetting.
func (mr *MockDAOMockRecorder) FindUserSetting(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserSetting", reflect.TypeOf((*MockDAO)(nil).FindUserSetting), ctx, filter)
}

// FindUserSettings mocks base method.
func (m *MockDAO) FindUserSettings(ctx context.Context, filter *model.FindUserSettingFilter) ([]*model.UserSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserSettings", ctx, filter)
	ret0, _ := ret[0].([]*model.UserSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserSettings indicates an expected call of FindUserSettings.
func (mr *MockDAOMockRecorder) FindUserSettings(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserSettings", reflect.TypeOf((*MockDAO)(nil).FindUserSettings), ctx, filter)
}

// FindUsers mocks base method.
func (m *MockDAO) FindUsers(ctx context.Context, filter *model.FindUserFilter) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsers", ctx, filter)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockDAOMockRecorder) FindUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockDAO)(nil).FindUsers), ctx, filter)
}

// UpdateInbox mocks base method.
func (m_2 *MockDAO) UpdateInbox(ctx context.Context, m *model.Inbox, update map[string]any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateInbox", ctx, m, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInbox indicates an expected call of UpdateInbox.
func (mr *MockDAOMockRecorder) UpdateInbox(ctx, m, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInbox", reflect.TypeOf((*MockDAO)(nil).UpdateInbox), ctx, m, update)
}

// UpdateInboxes mocks base method.
func (m *MockDAO) UpdateInboxes(ctx context.Context, filter *model.FindInboxFilter, update map[string]any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInboxes", ctx, filter, update)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInboxes indicates an expected call of UpdateInboxes.
func (mr *MockDAOMockRecorder) UpdateInboxes(ctx, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInboxes", reflect.TypeOf((*MockDAO)(nil).UpdateInboxes), ctx, filter, update)
}

// UpdateMemo mocks base method.
func (m_2 *MockDAO) UpdateMemo(ctx context.Context, m *model.Memo, update map[string]any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateMemo", ctx, m, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemo indicates an expected call of UpdateMemo.
func (mr *MockDAOMockRecorder) UpdateMemo(ctx, m, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemo", reflect.TypeOf((*MockDAO)(nil).UpdateMemo), ctx, m, update)
}

// UpdateMemoRelation mocks base method.
func (m_2 *MockDAO) UpdateMemoRelation(ctx context.Context, m *model.MemoRelation, update map[string]any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateMemoRelation", ctx, m, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemoRelation indicates an expected call of UpdateMemoRelation.
func (mr *MockDAOMockRecorder) UpdateMemoRelation(ctx, m, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemoRelation", reflect.TypeOf((*MockDAO)(nil).UpdateMemoRelation), ctx, m, update)
}

// UpdateReaction mocks base method.
func (m_2 *MockDAO) UpdateReaction(ctx context.Context, m *model.Reaction, update map[string]any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateReaction", ctx, m, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReaction indicates an expected call of UpdateReaction.
func (mr *MockDAOMockRecorder) UpdateReaction(ctx, m, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReaction", reflect.TypeOf((*MockDAO)(nil).UpdateReaction), ctx, m, update)
}

// UpdateSystemSetting mocks base method.
func (m_2 *MockDAO) UpdateSystemSetting(ctx context.Context, m *model.SystemSetting, update map[string]any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateSystemSetting", ctx, m, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSystemSetting indicates an expected call of UpdateSystemSetting.
func (mr *MockDAOMockRecorder) UpdateSystemSetting(ctx, m, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemSetting", reflect.TypeOf((*MockDAO)(nil).UpdateSystemSetting), ctx, m, update)
}

// UpdateSystemSettings mocks base method.
func (m *MockDAO) UpdateSystemSettings(ctx context.Context, filter *model.FindSystemSettingFilter, update map[string]any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSystemSettings", ctx, filter, update)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSystemSettings indicates an expected call of UpdateSystemSettings.
func (mr *MockDAOMockRecorder) UpdateSystemSettings(ctx, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemSettings", reflect.TypeOf((*MockDAO)(nil).UpdateSystemSettings), ctx, filter, update)
}

// UpdateUser mocks base method.
func (m_2 *MockDAO) UpdateUser(ctx context.Context, m *model.User, update map[string]any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateUser", ctx, m, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDAOMockRecorder) UpdateUser(ctx, m, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDAO)(nil).UpdateUser), ctx, m, update)
}

// UpdateUserSetting mocks base method.
func (m_2 *MockDAO) UpdateUserSetting(ctx context.Context, m *model.UserSetting, update map[string]any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateUserSetting", ctx, m, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSetting indicates an expected call of UpdateUserSetting.
func (mr *MockDAOMockRecorder) UpdateUserSetting(ctx, m, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSetting", reflect.TypeOf((*MockDAO)(nil).UpdateUserSetting), ctx, m, update)
}

// UpdateUserSettings mocks base method.
func (m *MockDAO) UpdateUserSettings(ctx context.Context, filter *model.FindUserSettingFilter, update map[string]any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSettings", ctx, filter, update)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserSettings indicates an expected call of UpdateUserSettings.
func (mr *MockDAOMockRecorder) UpdateUserSettings(ctx, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSettings", reflect.TypeOf((*MockDAO)(nil).UpdateUserSettings), ctx, filter, update)
}

// UpdateUsers mocks base method.
func (m *MockDAO) UpdateUsers(ctx context.Context, filter *model.FindUserFilter, update map[string]any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsers", ctx, filter, update)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsers indicates an expected call of UpdateUsers.
func (mr *MockDAOMockRecorder) UpdateUsers(ctx, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsers", reflect.TypeOf((*MockDAO)(nil).UpdateUsers), ctx, filter, update)
}

// UpsertMemoRelation mocks base method.
func (m_2 *MockDAO) UpsertMemoRelation(ctx context.Context, m *model.MemoRelation) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpsertMemoRelation", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertMemoRelation indicates an expected call of UpsertMemoRelation.
func (mr *MockDAOMockRecorder) UpsertMemoRelation(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMemoRelation", reflect.TypeOf((*MockDAO)(nil).UpsertMemoRelation), ctx, m)
}
