// Code generated by MockGen. DO NOT EDIT.
// Source: dao.go

// Package memos is a generated GoMock package.
package memos

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/smartmemos/memos/internal/memos/model"
)

// MockDAO is a mock of DAO interface.
type MockDAO struct {
	ctrl     *gomock.Controller
	recorder *MockDAOMockRecorder
}

// MockDAOMockRecorder is the mock recorder for MockDAO.
type MockDAOMockRecorder struct {
	mock *MockDAO
}

// NewMockDAO creates a new mock instance.
func NewMockDAO(ctrl *gomock.Controller) *MockDAO {
	mock := &MockDAO{ctrl: ctrl}
	mock.recorder = &MockDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDAO) EXPECT() *MockDAOMockRecorder {
	return m.recorder
}

// CountMemos mocks base method.
func (m *MockDAO) CountMemos(ctx context.Context, filter *model.FindMemoFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountMemos", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountMemos indicates an expected call of CountMemos.
func (mr *MockDAOMockRecorder) CountMemos(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountMemos", reflect.TypeOf((*MockDAO)(nil).CountMemos), ctx, filter)
}

// CountUsers mocks base method.
func (m *MockDAO) CountUsers(ctx context.Context, filter *model.FindUserFilter) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockDAOMockRecorder) CountUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockDAO)(nil).CountUsers), ctx, filter)
}

// CreateMemo mocks base method.
func (m_2 *MockDAO) CreateMemo(ctx context.Context, m *model.Memo) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateMemo", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMemo indicates an expected call of CreateMemo.
func (mr *MockDAOMockRecorder) CreateMemo(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemo", reflect.TypeOf((*MockDAO)(nil).CreateMemo), ctx, m)
}

// CreateSession mocks base method.
func (m_2 *MockDAO) CreateSession(ctx context.Context, m *model.Session) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateSession", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockDAOMockRecorder) CreateSession(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockDAO)(nil).CreateSession), ctx, m)
}

// CreateSystemSetting mocks base method.
func (m_2 *MockDAO) CreateSystemSetting(ctx context.Context, m *model.SystemSetting) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateSystemSetting", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSystemSetting indicates an expected call of CreateSystemSetting.
func (mr *MockDAOMockRecorder) CreateSystemSetting(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSystemSetting", reflect.TypeOf((*MockDAO)(nil).CreateSystemSetting), ctx, m)
}

// CreateUser mocks base method.
func (m_2 *MockDAO) CreateUser(ctx context.Context, m *model.User) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "CreateUser", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockDAOMockRecorder) CreateUser(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockDAO)(nil).CreateUser), ctx, m)
}

// DeleteMemos mocks base method.
func (m *MockDAO) DeleteMemos(ctx context.Context, filter *model.FindMemoFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMemos", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMemos indicates an expected call of DeleteMemos.
func (mr *MockDAOMockRecorder) DeleteMemos(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMemos", reflect.TypeOf((*MockDAO)(nil).DeleteMemos), ctx, filter)
}

// DeleteSystemSettings mocks base method.
func (m *MockDAO) DeleteSystemSettings(ctx context.Context, filter *model.FindSystemSettingFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSystemSettings", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSystemSettings indicates an expected call of DeleteSystemSettings.
func (mr *MockDAOMockRecorder) DeleteSystemSettings(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSystemSettings", reflect.TypeOf((*MockDAO)(nil).DeleteSystemSettings), ctx, filter)
}

// DeleteUsers mocks base method.
func (m *MockDAO) DeleteUsers(ctx context.Context, filter *model.FindUserFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUsers", ctx, filter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUsers indicates an expected call of DeleteUsers.
func (mr *MockDAOMockRecorder) DeleteUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUsers", reflect.TypeOf((*MockDAO)(nil).DeleteUsers), ctx, filter)
}

// FindMemo mocks base method.
func (m *MockDAO) FindMemo(ctx context.Context, filter *model.FindMemoFilter) (*model.Memo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMemo", ctx, filter)
	ret0, _ := ret[0].(*model.Memo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMemo indicates an expected call of FindMemo.
func (mr *MockDAOMockRecorder) FindMemo(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMemo", reflect.TypeOf((*MockDAO)(nil).FindMemo), ctx, filter)
}

// FindMemoByID mocks base method.
func (m *MockDAO) FindMemoByID(ctx context.Context, id int64) (*model.Memo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMemoByID", ctx, id)
	ret0, _ := ret[0].(*model.Memo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMemoByID indicates an expected call of FindMemoByID.
func (mr *MockDAOMockRecorder) FindMemoByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMemoByID", reflect.TypeOf((*MockDAO)(nil).FindMemoByID), ctx, id)
}

// FindMemos mocks base method.
func (m *MockDAO) FindMemos(ctx context.Context, filter *model.FindMemoFilter) ([]*model.Memo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMemos", ctx, filter)
	ret0, _ := ret[0].([]*model.Memo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMemos indicates an expected call of FindMemos.
func (mr *MockDAOMockRecorder) FindMemos(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMemos", reflect.TypeOf((*MockDAO)(nil).FindMemos), ctx, filter)
}

// FindSystemSetting mocks base method.
func (m *MockDAO) FindSystemSetting(ctx context.Context, filter *model.FindSystemSettingFilter) (*model.SystemSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSystemSetting", ctx, filter)
	ret0, _ := ret[0].(*model.SystemSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSystemSetting indicates an expected call of FindSystemSetting.
func (mr *MockDAOMockRecorder) FindSystemSetting(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSystemSetting", reflect.TypeOf((*MockDAO)(nil).FindSystemSetting), ctx, filter)
}

// FindSystemSettings mocks base method.
func (m *MockDAO) FindSystemSettings(ctx context.Context, filter *model.FindSystemSettingFilter) ([]*model.SystemSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSystemSettings", ctx, filter)
	ret0, _ := ret[0].([]*model.SystemSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSystemSettings indicates an expected call of FindSystemSettings.
func (mr *MockDAOMockRecorder) FindSystemSettings(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSystemSettings", reflect.TypeOf((*MockDAO)(nil).FindSystemSettings), ctx, filter)
}

// FindUser mocks base method.
func (m *MockDAO) FindUser(ctx context.Context, filter *model.FindUserFilter) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", ctx, filter)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockDAOMockRecorder) FindUser(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockDAO)(nil).FindUser), ctx, filter)
}

// FindUserByID mocks base method.
func (m *MockDAO) FindUserByID(ctx context.Context, id int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserByID indicates an expected call of FindUserByID.
func (mr *MockDAOMockRecorder) FindUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByID", reflect.TypeOf((*MockDAO)(nil).FindUserByID), ctx, id)
}

// FindUsers mocks base method.
func (m *MockDAO) FindUsers(ctx context.Context, filter *model.FindUserFilter) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUsers", ctx, filter)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUsers indicates an expected call of FindUsers.
func (mr *MockDAOMockRecorder) FindUsers(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUsers", reflect.TypeOf((*MockDAO)(nil).FindUsers), ctx, filter)
}

// UpdateSystemSetting mocks base method.
func (m_2 *MockDAO) UpdateSystemSetting(ctx context.Context, m *model.SystemSetting, update map[string]any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateSystemSetting", ctx, m, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSystemSetting indicates an expected call of UpdateSystemSetting.
func (mr *MockDAOMockRecorder) UpdateSystemSetting(ctx, m, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemSetting", reflect.TypeOf((*MockDAO)(nil).UpdateSystemSetting), ctx, m, update)
}

// UpdateSystemSettings mocks base method.
func (m *MockDAO) UpdateSystemSettings(ctx context.Context, filter *model.FindSystemSettingFilter, update map[string]any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSystemSettings", ctx, filter, update)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSystemSettings indicates an expected call of UpdateSystemSettings.
func (mr *MockDAOMockRecorder) UpdateSystemSettings(ctx, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSystemSettings", reflect.TypeOf((*MockDAO)(nil).UpdateSystemSettings), ctx, filter, update)
}

// UpdateUser mocks base method.
func (m_2 *MockDAO) UpdateUser(ctx context.Context, m *model.User, update map[string]any) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "UpdateUser", ctx, m, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDAOMockRecorder) UpdateUser(ctx, m, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDAO)(nil).UpdateUser), ctx, m, update)
}

// UpdateUsers mocks base method.
func (m *MockDAO) UpdateUsers(ctx context.Context, filter *model.FindUserFilter, update map[string]any) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUsers", ctx, filter, update)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUsers indicates an expected call of UpdateUsers.
func (mr *MockDAOMockRecorder) UpdateUsers(ctx, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsers", reflect.TypeOf((*MockDAO)(nil).UpdateUsers), ctx, filter, update)
}
