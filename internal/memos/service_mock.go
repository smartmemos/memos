// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package memos is a generated GoMock package.
package memos

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/smartmemos/memos/internal/memos/model"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateMemo mocks base method.
func (m *MockService) CreateMemo(ctx context.Context, req *model.CreateMemoRequest) (*model.Memo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMemo", ctx, req)
	ret0, _ := ret[0].(*model.Memo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMemo indicates an expected call of CreateMemo.
func (mr *MockServiceMockRecorder) CreateMemo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemo", reflect.TypeOf((*MockService)(nil).CreateMemo), ctx, req)
}

// CreateSession mocks base method.
func (m *MockService) CreateSession(ctx context.Context, req *model.CreateSessionRequest) (*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, req)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockServiceMockRecorder) CreateSession(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockService)(nil).CreateSession), ctx, req)
}

// CreateUser mocks base method.
func (m *MockService) CreateUser(ctx context.Context, req *model.CreateUserRequest) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, req)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockServiceMockRecorder) CreateUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockService)(nil).CreateUser), ctx, req)
}

// GetGeneralSetting mocks base method.
func (m *MockService) GetGeneralSetting(ctx context.Context) (*model.GeneralSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGeneralSetting", ctx)
	ret0, _ := ret[0].(*model.GeneralSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGeneralSetting indicates an expected call of GetGeneralSetting.
func (mr *MockServiceMockRecorder) GetGeneralSetting(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGeneralSetting", reflect.TypeOf((*MockService)(nil).GetGeneralSetting), ctx)
}

// GetMemo mocks base method.
func (m *MockService) GetMemo(ctx context.Context, req *model.GetMemoRequest) (*model.Memo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemo", ctx, req)
	ret0, _ := ret[0].(*model.Memo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemo indicates an expected call of GetMemo.
func (mr *MockServiceMockRecorder) GetMemo(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemo", reflect.TypeOf((*MockService)(nil).GetMemo), ctx, req)
}

// GetMemoRelatedSetting mocks base method.
func (m *MockService) GetMemoRelatedSetting(ctx context.Context) (*model.MemoRelatedSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemoRelatedSetting", ctx)
	ret0, _ := ret[0].(*model.MemoRelatedSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemoRelatedSetting indicates an expected call of GetMemoRelatedSetting.
func (mr *MockServiceMockRecorder) GetMemoRelatedSetting(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemoRelatedSetting", reflect.TypeOf((*MockService)(nil).GetMemoRelatedSetting), ctx)
}

// GetStorageSetting mocks base method.
func (m *MockService) GetStorageSetting(ctx context.Context) (*model.StorageSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageSetting", ctx)
	ret0, _ := ret[0].(*model.StorageSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageSetting indicates an expected call of GetStorageSetting.
func (mr *MockServiceMockRecorder) GetStorageSetting(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageSetting", reflect.TypeOf((*MockService)(nil).GetStorageSetting), ctx)
}

// GetUserByID mocks base method.
func (m *MockService) GetUserByID(ctx context.Context, id int64) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockServiceMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockService)(nil).GetUserByID), ctx, id)
}

// GetUserSetting mocks base method.
func (m *MockService) GetUserSetting(ctx context.Context, req *model.GetUserSettingRequest) (*model.UserSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSetting", ctx, req)
	ret0, _ := ret[0].(*model.UserSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSetting indicates an expected call of GetUserSetting.
func (mr *MockServiceMockRecorder) GetUserSetting(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSetting", reflect.TypeOf((*MockService)(nil).GetUserSetting), ctx, req)
}

// GetUserSettings mocks base method.
func (m *MockService) GetUserSettings(ctx context.Context, req *model.GetUserSettingsRequest) ([]*model.UserSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSettings", ctx, req)
	ret0, _ := ret[0].([]*model.UserSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSettings indicates an expected call of GetUserSettings.
func (mr *MockServiceMockRecorder) GetUserSettings(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSettings", reflect.TypeOf((*MockService)(nil).GetUserSettings), ctx, req)
}

// ListInboxes mocks base method.
func (m *MockService) ListInboxes(ctx context.Context, req *model.ListInboxesRequest) (int64, []*model.Inbox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInboxes", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*model.Inbox)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListInboxes indicates an expected call of ListInboxes.
func (mr *MockServiceMockRecorder) ListInboxes(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInboxes", reflect.TypeOf((*MockService)(nil).ListInboxes), ctx, req)
}

// ListMemos mocks base method.
func (m *MockService) ListMemos(ctx context.Context, req *model.ListMemosRequest) (int64, []*model.Memo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMemos", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].([]*model.Memo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMemos indicates an expected call of ListMemos.
func (mr *MockServiceMockRecorder) ListMemos(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMemos", reflect.TypeOf((*MockService)(nil).ListMemos), ctx, req)
}
