// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/user.proto

package v1

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	user "github.com/smartmemos/memos/internal/proto/model/user"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "api.v1.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/api.v1.UserService/CreateUser"
	// UserServiceGetUserSettingProcedure is the fully-qualified name of the UserService's
	// GetUserSetting RPC.
	UserServiceGetUserSettingProcedure = "/api.v1.UserService/GetUserSetting"
	// UserServiceUpdateUserSettingProcedure is the fully-qualified name of the UserService's
	// UpdateUserSetting RPC.
	UserServiceUpdateUserSettingProcedure = "/api.v1.UserService/UpdateUserSetting"
	// UserServiceUpdateUserProcedure is the fully-qualified name of the UserService's UpdateUser RPC.
	UserServiceUpdateUserProcedure = "/api.v1.UserService/UpdateUser"
	// UserServiceListAllUserStatsProcedure is the fully-qualified name of the UserService's
	// ListAllUserStats RPC.
	UserServiceListAllUserStatsProcedure = "/api.v1.UserService/ListAllUserStats"
	// UserServiceGetUserStatsProcedure is the fully-qualified name of the UserService's GetUserStats
	// RPC.
	UserServiceGetUserStatsProcedure = "/api.v1.UserService/GetUserStats"
	// UserServiceCreateAccessTokenProcedure is the fully-qualified name of the UserService's
	// CreateAccessToken RPC.
	UserServiceCreateAccessTokenProcedure = "/api.v1.UserService/CreateAccessToken"
	// UserServiceDeleteAccessTokenProcedure is the fully-qualified name of the UserService's
	// DeleteAccessToken RPC.
	UserServiceDeleteAccessTokenProcedure = "/api.v1.UserService/DeleteAccessToken"
	// UserServiceListAccessTokensProcedure is the fully-qualified name of the UserService's
	// ListAccessTokens RPC.
	UserServiceListAccessTokensProcedure = "/api.v1.UserService/ListAccessTokens"
)

// UserServiceClient is a client for the api.v1.UserService service.
type UserServiceClient interface {
	// CreateUser creates a new user.
	CreateUser(context.Context, *connect.Request[CreateUserRequest]) (*connect.Response[user.User], error)
	// GetUserSetting gets the setting of a user.
	GetUserSetting(context.Context, *connect.Request[GetUserSettingRequest]) (*connect.Response[user.Setting], error)
	// UpdateUserSetting updates the setting of a user.
	UpdateUserSetting(context.Context, *connect.Request[UpdateUserSettingRequest]) (*connect.Response[user.Setting], error)
	// UpdateUser updates a user.
	UpdateUser(context.Context, *connect.Request[UpdateUserRequest]) (*connect.Response[user.User], error)
	// ListAllUserStats returns all user stats.
	ListAllUserStats(context.Context, *connect.Request[ListAllUserStatsRequest]) (*connect.Response[ListAllUserStatsResponse], error)
	// GetUserStats returns the stats of a user.
	GetUserStats(context.Context, *connect.Request[GetUserStatsRequest]) (*connect.Response[user.Stats], error)
	// CreateUserAccessToken creates a new access token for a user.
	CreateAccessToken(context.Context, *connect.Request[CreateAccessTokenRequest]) (*connect.Response[user.AccessToken], error)
	// DeleteAccessToken deletes an access token for a user.
	DeleteAccessToken(context.Context, *connect.Request[DeleteAccessTokenRequest]) (*connect.Response[emptypb.Empty], error)
	// ListAccessTokens returns a list of access tokens for a user.
	ListAccessTokens(context.Context, *connect.Request[ListAccessTokensRequest]) (*connect.Response[ListAccessTokensResponse], error)
}

// NewUserServiceClient constructs a client for the api.v1.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := File_api_v1_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		createUser: connect.NewClient[CreateUserRequest, user.User](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		getUserSetting: connect.NewClient[GetUserSettingRequest, user.Setting](
			httpClient,
			baseURL+UserServiceGetUserSettingProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserSetting")),
			connect.WithClientOptions(opts...),
		),
		updateUserSetting: connect.NewClient[UpdateUserSettingRequest, user.Setting](
			httpClient,
			baseURL+UserServiceUpdateUserSettingProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUserSetting")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[UpdateUserRequest, user.User](
			httpClient,
			baseURL+UserServiceUpdateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		listAllUserStats: connect.NewClient[ListAllUserStatsRequest, ListAllUserStatsResponse](
			httpClient,
			baseURL+UserServiceListAllUserStatsProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListAllUserStats")),
			connect.WithClientOptions(opts...),
		),
		getUserStats: connect.NewClient[GetUserStatsRequest, user.Stats](
			httpClient,
			baseURL+UserServiceGetUserStatsProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserStats")),
			connect.WithClientOptions(opts...),
		),
		createAccessToken: connect.NewClient[CreateAccessTokenRequest, user.AccessToken](
			httpClient,
			baseURL+UserServiceCreateAccessTokenProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateAccessToken")),
			connect.WithClientOptions(opts...),
		),
		deleteAccessToken: connect.NewClient[DeleteAccessTokenRequest, emptypb.Empty](
			httpClient,
			baseURL+UserServiceDeleteAccessTokenProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteAccessToken")),
			connect.WithClientOptions(opts...),
		),
		listAccessTokens: connect.NewClient[ListAccessTokensRequest, ListAccessTokensResponse](
			httpClient,
			baseURL+UserServiceListAccessTokensProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListAccessTokens")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	createUser        *connect.Client[CreateUserRequest, user.User]
	getUserSetting    *connect.Client[GetUserSettingRequest, user.Setting]
	updateUserSetting *connect.Client[UpdateUserSettingRequest, user.Setting]
	updateUser        *connect.Client[UpdateUserRequest, user.User]
	listAllUserStats  *connect.Client[ListAllUserStatsRequest, ListAllUserStatsResponse]
	getUserStats      *connect.Client[GetUserStatsRequest, user.Stats]
	createAccessToken *connect.Client[CreateAccessTokenRequest, user.AccessToken]
	deleteAccessToken *connect.Client[DeleteAccessTokenRequest, emptypb.Empty]
	listAccessTokens  *connect.Client[ListAccessTokensRequest, ListAccessTokensResponse]
}

// CreateUser calls api.v1.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect.Request[CreateUserRequest]) (*connect.Response[user.User], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUserSetting calls api.v1.UserService.GetUserSetting.
func (c *userServiceClient) GetUserSetting(ctx context.Context, req *connect.Request[GetUserSettingRequest]) (*connect.Response[user.Setting], error) {
	return c.getUserSetting.CallUnary(ctx, req)
}

// UpdateUserSetting calls api.v1.UserService.UpdateUserSetting.
func (c *userServiceClient) UpdateUserSetting(ctx context.Context, req *connect.Request[UpdateUserSettingRequest]) (*connect.Response[user.Setting], error) {
	return c.updateUserSetting.CallUnary(ctx, req)
}

// UpdateUser calls api.v1.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect.Request[UpdateUserRequest]) (*connect.Response[user.User], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// ListAllUserStats calls api.v1.UserService.ListAllUserStats.
func (c *userServiceClient) ListAllUserStats(ctx context.Context, req *connect.Request[ListAllUserStatsRequest]) (*connect.Response[ListAllUserStatsResponse], error) {
	return c.listAllUserStats.CallUnary(ctx, req)
}

// GetUserStats calls api.v1.UserService.GetUserStats.
func (c *userServiceClient) GetUserStats(ctx context.Context, req *connect.Request[GetUserStatsRequest]) (*connect.Response[user.Stats], error) {
	return c.getUserStats.CallUnary(ctx, req)
}

// CreateAccessToken calls api.v1.UserService.CreateAccessToken.
func (c *userServiceClient) CreateAccessToken(ctx context.Context, req *connect.Request[CreateAccessTokenRequest]) (*connect.Response[user.AccessToken], error) {
	return c.createAccessToken.CallUnary(ctx, req)
}

// DeleteAccessToken calls api.v1.UserService.DeleteAccessToken.
func (c *userServiceClient) DeleteAccessToken(ctx context.Context, req *connect.Request[DeleteAccessTokenRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteAccessToken.CallUnary(ctx, req)
}

// ListAccessTokens calls api.v1.UserService.ListAccessTokens.
func (c *userServiceClient) ListAccessTokens(ctx context.Context, req *connect.Request[ListAccessTokensRequest]) (*connect.Response[ListAccessTokensResponse], error) {
	return c.listAccessTokens.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the api.v1.UserService service.
type UserServiceHandler interface {
	// CreateUser creates a new user.
	CreateUser(context.Context, *connect.Request[CreateUserRequest]) (*connect.Response[user.User], error)
	// GetUserSetting gets the setting of a user.
	GetUserSetting(context.Context, *connect.Request[GetUserSettingRequest]) (*connect.Response[user.Setting], error)
	// UpdateUserSetting updates the setting of a user.
	UpdateUserSetting(context.Context, *connect.Request[UpdateUserSettingRequest]) (*connect.Response[user.Setting], error)
	// UpdateUser updates a user.
	UpdateUser(context.Context, *connect.Request[UpdateUserRequest]) (*connect.Response[user.User], error)
	// ListAllUserStats returns all user stats.
	ListAllUserStats(context.Context, *connect.Request[ListAllUserStatsRequest]) (*connect.Response[ListAllUserStatsResponse], error)
	// GetUserStats returns the stats of a user.
	GetUserStats(context.Context, *connect.Request[GetUserStatsRequest]) (*connect.Response[user.Stats], error)
	// CreateUserAccessToken creates a new access token for a user.
	CreateAccessToken(context.Context, *connect.Request[CreateAccessTokenRequest]) (*connect.Response[user.AccessToken], error)
	// DeleteAccessToken deletes an access token for a user.
	DeleteAccessToken(context.Context, *connect.Request[DeleteAccessTokenRequest]) (*connect.Response[emptypb.Empty], error)
	// ListAccessTokens returns a list of access tokens for a user.
	ListAccessTokens(context.Context, *connect.Request[ListAccessTokensRequest]) (*connect.Response[ListAccessTokensResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := File_api_v1_user_proto.Services().ByName("UserService").Methods()
	userServiceCreateUserHandler := connect.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserSettingHandler := connect.NewUnaryHandler(
		UserServiceGetUserSettingProcedure,
		svc.GetUserSetting,
		connect.WithSchema(userServiceMethods.ByName("GetUserSetting")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserSettingHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserSettingProcedure,
		svc.UpdateUserSetting,
		connect.WithSchema(userServiceMethods.ByName("UpdateUserSetting")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListAllUserStatsHandler := connect.NewUnaryHandler(
		UserServiceListAllUserStatsProcedure,
		svc.ListAllUserStats,
		connect.WithSchema(userServiceMethods.ByName("ListAllUserStats")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserStatsHandler := connect.NewUnaryHandler(
		UserServiceGetUserStatsProcedure,
		svc.GetUserStats,
		connect.WithSchema(userServiceMethods.ByName("GetUserStats")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceCreateAccessTokenHandler := connect.NewUnaryHandler(
		UserServiceCreateAccessTokenProcedure,
		svc.CreateAccessToken,
		connect.WithSchema(userServiceMethods.ByName("CreateAccessToken")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteAccessTokenHandler := connect.NewUnaryHandler(
		UserServiceDeleteAccessTokenProcedure,
		svc.DeleteAccessToken,
		connect.WithSchema(userServiceMethods.ByName("DeleteAccessToken")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListAccessTokensHandler := connect.NewUnaryHandler(
		UserServiceListAccessTokensProcedure,
		svc.ListAccessTokens,
		connect.WithSchema(userServiceMethods.ByName("ListAccessTokens")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceCreateUserProcedure:
			userServiceCreateUserHandler.ServeHTTP(w, r)
		case UserServiceGetUserSettingProcedure:
			userServiceGetUserSettingHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserSettingProcedure:
			userServiceUpdateUserSettingHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProcedure:
			userServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserServiceListAllUserStatsProcedure:
			userServiceListAllUserStatsHandler.ServeHTTP(w, r)
		case UserServiceGetUserStatsProcedure:
			userServiceGetUserStatsHandler.ServeHTTP(w, r)
		case UserServiceCreateAccessTokenProcedure:
			userServiceCreateAccessTokenHandler.ServeHTTP(w, r)
		case UserServiceDeleteAccessTokenProcedure:
			userServiceDeleteAccessTokenHandler.ServeHTTP(w, r)
		case UserServiceListAccessTokensProcedure:
			userServiceListAccessTokensHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect.Request[CreateUserRequest]) (*connect.Response[user.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserSetting(context.Context, *connect.Request[GetUserSettingRequest]) (*connect.Response[user.Setting], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.GetUserSetting is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUserSetting(context.Context, *connect.Request[UpdateUserSettingRequest]) (*connect.Response[user.Setting], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.UpdateUserSetting is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect.Request[UpdateUserRequest]) (*connect.Response[user.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) ListAllUserStats(context.Context, *connect.Request[ListAllUserStatsRequest]) (*connect.Response[ListAllUserStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.ListAllUserStats is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserStats(context.Context, *connect.Request[GetUserStatsRequest]) (*connect.Response[user.Stats], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.GetUserStats is not implemented"))
}

func (UnimplementedUserServiceHandler) CreateAccessToken(context.Context, *connect.Request[CreateAccessTokenRequest]) (*connect.Response[user.AccessToken], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.CreateAccessToken is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteAccessToken(context.Context, *connect.Request[DeleteAccessTokenRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.DeleteAccessToken is not implemented"))
}

func (UnimplementedUserServiceHandler) ListAccessTokens(context.Context, *connect.Request[ListAccessTokensRequest]) (*connect.Response[ListAccessTokensResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.UserService.ListAccessTokens is not implemented"))
}
