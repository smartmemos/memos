// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v1/markdown.proto

package v1

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	markdown "github.com/smartmemos/memos/internal/proto/model/markdown"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MarkdownServiceName is the fully-qualified name of the MarkdownService service.
	MarkdownServiceName = "api.v1.MarkdownService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MarkdownServiceParseMarkdownProcedure is the fully-qualified name of the MarkdownService's
	// ParseMarkdown RPC.
	MarkdownServiceParseMarkdownProcedure = "/api.v1.MarkdownService/ParseMarkdown"
	// MarkdownServiceRestoreMarkdownNodesProcedure is the fully-qualified name of the MarkdownService's
	// RestoreMarkdownNodes RPC.
	MarkdownServiceRestoreMarkdownNodesProcedure = "/api.v1.MarkdownService/RestoreMarkdownNodes"
	// MarkdownServiceStringifyMarkdownNodesProcedure is the fully-qualified name of the
	// MarkdownService's StringifyMarkdownNodes RPC.
	MarkdownServiceStringifyMarkdownNodesProcedure = "/api.v1.MarkdownService/StringifyMarkdownNodes"
	// MarkdownServiceGetLinkMetadataProcedure is the fully-qualified name of the MarkdownService's
	// GetLinkMetadata RPC.
	MarkdownServiceGetLinkMetadataProcedure = "/api.v1.MarkdownService/GetLinkMetadata"
)

// MarkdownServiceClient is a client for the api.v1.MarkdownService service.
type MarkdownServiceClient interface {
	// ParseMarkdown parses the given markdown content and returns a list of nodes.
	ParseMarkdown(context.Context, *connect.Request[ParseMarkdownRequest]) (*connect.Response[ParseMarkdownResponse], error)
	// RestoreMarkdownNodes restores the given nodes to markdown content.
	RestoreMarkdownNodes(context.Context, *connect.Request[RestoreMarkdownNodesRequest]) (*connect.Response[RestoreMarkdownNodesResponse], error)
	// StringifyMarkdownNodes stringify the given nodes to plain text content.
	StringifyMarkdownNodes(context.Context, *connect.Request[StringifyMarkdownNodesRequest]) (*connect.Response[StringifyMarkdownNodesResponse], error)
	// GetLinkMetadata returns metadata for a given link.
	GetLinkMetadata(context.Context, *connect.Request[GetLinkMetadataRequest]) (*connect.Response[markdown.LinkMetadata], error)
}

// NewMarkdownServiceClient constructs a client for the api.v1.MarkdownService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMarkdownServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MarkdownServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	markdownServiceMethods := File_api_v1_markdown_proto.Services().ByName("MarkdownService").Methods()
	return &markdownServiceClient{
		parseMarkdown: connect.NewClient[ParseMarkdownRequest, ParseMarkdownResponse](
			httpClient,
			baseURL+MarkdownServiceParseMarkdownProcedure,
			connect.WithSchema(markdownServiceMethods.ByName("ParseMarkdown")),
			connect.WithClientOptions(opts...),
		),
		restoreMarkdownNodes: connect.NewClient[RestoreMarkdownNodesRequest, RestoreMarkdownNodesResponse](
			httpClient,
			baseURL+MarkdownServiceRestoreMarkdownNodesProcedure,
			connect.WithSchema(markdownServiceMethods.ByName("RestoreMarkdownNodes")),
			connect.WithClientOptions(opts...),
		),
		stringifyMarkdownNodes: connect.NewClient[StringifyMarkdownNodesRequest, StringifyMarkdownNodesResponse](
			httpClient,
			baseURL+MarkdownServiceStringifyMarkdownNodesProcedure,
			connect.WithSchema(markdownServiceMethods.ByName("StringifyMarkdownNodes")),
			connect.WithClientOptions(opts...),
		),
		getLinkMetadata: connect.NewClient[GetLinkMetadataRequest, markdown.LinkMetadata](
			httpClient,
			baseURL+MarkdownServiceGetLinkMetadataProcedure,
			connect.WithSchema(markdownServiceMethods.ByName("GetLinkMetadata")),
			connect.WithClientOptions(opts...),
		),
	}
}

// markdownServiceClient implements MarkdownServiceClient.
type markdownServiceClient struct {
	parseMarkdown          *connect.Client[ParseMarkdownRequest, ParseMarkdownResponse]
	restoreMarkdownNodes   *connect.Client[RestoreMarkdownNodesRequest, RestoreMarkdownNodesResponse]
	stringifyMarkdownNodes *connect.Client[StringifyMarkdownNodesRequest, StringifyMarkdownNodesResponse]
	getLinkMetadata        *connect.Client[GetLinkMetadataRequest, markdown.LinkMetadata]
}

// ParseMarkdown calls api.v1.MarkdownService.ParseMarkdown.
func (c *markdownServiceClient) ParseMarkdown(ctx context.Context, req *connect.Request[ParseMarkdownRequest]) (*connect.Response[ParseMarkdownResponse], error) {
	return c.parseMarkdown.CallUnary(ctx, req)
}

// RestoreMarkdownNodes calls api.v1.MarkdownService.RestoreMarkdownNodes.
func (c *markdownServiceClient) RestoreMarkdownNodes(ctx context.Context, req *connect.Request[RestoreMarkdownNodesRequest]) (*connect.Response[RestoreMarkdownNodesResponse], error) {
	return c.restoreMarkdownNodes.CallUnary(ctx, req)
}

// StringifyMarkdownNodes calls api.v1.MarkdownService.StringifyMarkdownNodes.
func (c *markdownServiceClient) StringifyMarkdownNodes(ctx context.Context, req *connect.Request[StringifyMarkdownNodesRequest]) (*connect.Response[StringifyMarkdownNodesResponse], error) {
	return c.stringifyMarkdownNodes.CallUnary(ctx, req)
}

// GetLinkMetadata calls api.v1.MarkdownService.GetLinkMetadata.
func (c *markdownServiceClient) GetLinkMetadata(ctx context.Context, req *connect.Request[GetLinkMetadataRequest]) (*connect.Response[markdown.LinkMetadata], error) {
	return c.getLinkMetadata.CallUnary(ctx, req)
}

// MarkdownServiceHandler is an implementation of the api.v1.MarkdownService service.
type MarkdownServiceHandler interface {
	// ParseMarkdown parses the given markdown content and returns a list of nodes.
	ParseMarkdown(context.Context, *connect.Request[ParseMarkdownRequest]) (*connect.Response[ParseMarkdownResponse], error)
	// RestoreMarkdownNodes restores the given nodes to markdown content.
	RestoreMarkdownNodes(context.Context, *connect.Request[RestoreMarkdownNodesRequest]) (*connect.Response[RestoreMarkdownNodesResponse], error)
	// StringifyMarkdownNodes stringify the given nodes to plain text content.
	StringifyMarkdownNodes(context.Context, *connect.Request[StringifyMarkdownNodesRequest]) (*connect.Response[StringifyMarkdownNodesResponse], error)
	// GetLinkMetadata returns metadata for a given link.
	GetLinkMetadata(context.Context, *connect.Request[GetLinkMetadataRequest]) (*connect.Response[markdown.LinkMetadata], error)
}

// NewMarkdownServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMarkdownServiceHandler(svc MarkdownServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	markdownServiceMethods := File_api_v1_markdown_proto.Services().ByName("MarkdownService").Methods()
	markdownServiceParseMarkdownHandler := connect.NewUnaryHandler(
		MarkdownServiceParseMarkdownProcedure,
		svc.ParseMarkdown,
		connect.WithSchema(markdownServiceMethods.ByName("ParseMarkdown")),
		connect.WithHandlerOptions(opts...),
	)
	markdownServiceRestoreMarkdownNodesHandler := connect.NewUnaryHandler(
		MarkdownServiceRestoreMarkdownNodesProcedure,
		svc.RestoreMarkdownNodes,
		connect.WithSchema(markdownServiceMethods.ByName("RestoreMarkdownNodes")),
		connect.WithHandlerOptions(opts...),
	)
	markdownServiceStringifyMarkdownNodesHandler := connect.NewUnaryHandler(
		MarkdownServiceStringifyMarkdownNodesProcedure,
		svc.StringifyMarkdownNodes,
		connect.WithSchema(markdownServiceMethods.ByName("StringifyMarkdownNodes")),
		connect.WithHandlerOptions(opts...),
	)
	markdownServiceGetLinkMetadataHandler := connect.NewUnaryHandler(
		MarkdownServiceGetLinkMetadataProcedure,
		svc.GetLinkMetadata,
		connect.WithSchema(markdownServiceMethods.ByName("GetLinkMetadata")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v1.MarkdownService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MarkdownServiceParseMarkdownProcedure:
			markdownServiceParseMarkdownHandler.ServeHTTP(w, r)
		case MarkdownServiceRestoreMarkdownNodesProcedure:
			markdownServiceRestoreMarkdownNodesHandler.ServeHTTP(w, r)
		case MarkdownServiceStringifyMarkdownNodesProcedure:
			markdownServiceStringifyMarkdownNodesHandler.ServeHTTP(w, r)
		case MarkdownServiceGetLinkMetadataProcedure:
			markdownServiceGetLinkMetadataHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMarkdownServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMarkdownServiceHandler struct{}

func (UnimplementedMarkdownServiceHandler) ParseMarkdown(context.Context, *connect.Request[ParseMarkdownRequest]) (*connect.Response[ParseMarkdownResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MarkdownService.ParseMarkdown is not implemented"))
}

func (UnimplementedMarkdownServiceHandler) RestoreMarkdownNodes(context.Context, *connect.Request[RestoreMarkdownNodesRequest]) (*connect.Response[RestoreMarkdownNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MarkdownService.RestoreMarkdownNodes is not implemented"))
}

func (UnimplementedMarkdownServiceHandler) StringifyMarkdownNodes(context.Context, *connect.Request[StringifyMarkdownNodesRequest]) (*connect.Response[StringifyMarkdownNodesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MarkdownService.StringifyMarkdownNodes is not implemented"))
}

func (UnimplementedMarkdownServiceHandler) GetLinkMetadata(context.Context, *connect.Request[GetLinkMetadataRequest]) (*connect.Response[markdown.LinkMetadata], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v1.MarkdownService.GetLinkMetadata is not implemented"))
}
