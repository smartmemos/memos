// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v2/memo.proto

package v2

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	model "github.com/smartmemos/memos/internal/proto/model"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MemoServiceName is the fully-qualified name of the MemoService service.
	MemoServiceName = "api.v2.MemoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MemoServiceCreateMemoProcedure is the fully-qualified name of the MemoService's CreateMemo RPC.
	MemoServiceCreateMemoProcedure = "/api.v2.MemoService/CreateMemo"
	// MemoServiceListMemosProcedure is the fully-qualified name of the MemoService's ListMemos RPC.
	MemoServiceListMemosProcedure = "/api.v2.MemoService/ListMemos"
	// MemoServiceGetMemoProcedure is the fully-qualified name of the MemoService's GetMemo RPC.
	MemoServiceGetMemoProcedure = "/api.v2.MemoService/GetMemo"
	// MemoServiceUpdateMemoProcedure is the fully-qualified name of the MemoService's UpdateMemo RPC.
	MemoServiceUpdateMemoProcedure = "/api.v2.MemoService/UpdateMemo"
	// MemoServiceDeleteMemoProcedure is the fully-qualified name of the MemoService's DeleteMemo RPC.
	MemoServiceDeleteMemoProcedure = "/api.v2.MemoService/DeleteMemo"
	// MemoServiceUpsertMemoReactionProcedure is the fully-qualified name of the MemoService's
	// UpsertMemoReaction RPC.
	MemoServiceUpsertMemoReactionProcedure = "/api.v2.MemoService/UpsertMemoReaction"
	// MemoServiceDeleteMemoReactionProcedure is the fully-qualified name of the MemoService's
	// DeleteMemoReaction RPC.
	MemoServiceDeleteMemoReactionProcedure = "/api.v2.MemoService/DeleteMemoReaction"
	// MemoServiceCreateMemoCommentProcedure is the fully-qualified name of the MemoService's
	// CreateMemoComment RPC.
	MemoServiceCreateMemoCommentProcedure = "/api.v2.MemoService/CreateMemoComment"
	// MemoServiceListMemoCommentsProcedure is the fully-qualified name of the MemoService's
	// ListMemoComments RPC.
	MemoServiceListMemoCommentsProcedure = "/api.v2.MemoService/ListMemoComments"
)

// MemoServiceClient is a client for the api.v2.MemoService service.
type MemoServiceClient interface {
	// CreateMemo creates a memo.
	CreateMemo(context.Context, *connect.Request[CreateMemoRequest]) (*connect.Response[model.Memo], error)
	// ListMemos lists memos with pagination and filter.
	ListMemos(context.Context, *connect.Request[ListMemosRequest]) (*connect.Response[ListMemosResponse], error)
	// GetMemo gets a memo.
	GetMemo(context.Context, *connect.Request[GetMemoRequest]) (*connect.Response[model.Memo], error)
	// UpdateMemo updates a memo.
	UpdateMemo(context.Context, *connect.Request[UpdateMemoRequest]) (*connect.Response[model.Memo], error)
	// DeleteMemo deletes a memo.
	DeleteMemo(context.Context, *connect.Request[DeleteMemoRequest]) (*connect.Response[emptypb.Empty], error)
	// UpsertMemoReaction upserts a reaction for a memo.
	UpsertMemoReaction(context.Context, *connect.Request[UpsertMemoReactionRequest]) (*connect.Response[model.Reaction], error)
	// DeleteMemoReaction deletes a reaction for a memo.
	DeleteMemoReaction(context.Context, *connect.Request[DeleteMemoReactionRequest]) (*connect.Response[emptypb.Empty], error)
	// CreateMemoComment creates a comment for a memo.
	CreateMemoComment(context.Context, *connect.Request[CreateMemoCommentRequest]) (*connect.Response[model.Memo], error)
	// ListMemoComments lists comments for a memo.
	ListMemoComments(context.Context, *connect.Request[ListMemoCommentsRequest]) (*connect.Response[ListMemoCommentsResponse], error)
}

// NewMemoServiceClient constructs a client for the api.v2.MemoService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMemoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MemoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	memoServiceMethods := File_api_v2_memo_proto.Services().ByName("MemoService").Methods()
	return &memoServiceClient{
		createMemo: connect.NewClient[CreateMemoRequest, model.Memo](
			httpClient,
			baseURL+MemoServiceCreateMemoProcedure,
			connect.WithSchema(memoServiceMethods.ByName("CreateMemo")),
			connect.WithClientOptions(opts...),
		),
		listMemos: connect.NewClient[ListMemosRequest, ListMemosResponse](
			httpClient,
			baseURL+MemoServiceListMemosProcedure,
			connect.WithSchema(memoServiceMethods.ByName("ListMemos")),
			connect.WithClientOptions(opts...),
		),
		getMemo: connect.NewClient[GetMemoRequest, model.Memo](
			httpClient,
			baseURL+MemoServiceGetMemoProcedure,
			connect.WithSchema(memoServiceMethods.ByName("GetMemo")),
			connect.WithClientOptions(opts...),
		),
		updateMemo: connect.NewClient[UpdateMemoRequest, model.Memo](
			httpClient,
			baseURL+MemoServiceUpdateMemoProcedure,
			connect.WithSchema(memoServiceMethods.ByName("UpdateMemo")),
			connect.WithClientOptions(opts...),
		),
		deleteMemo: connect.NewClient[DeleteMemoRequest, emptypb.Empty](
			httpClient,
			baseURL+MemoServiceDeleteMemoProcedure,
			connect.WithSchema(memoServiceMethods.ByName("DeleteMemo")),
			connect.WithClientOptions(opts...),
		),
		upsertMemoReaction: connect.NewClient[UpsertMemoReactionRequest, model.Reaction](
			httpClient,
			baseURL+MemoServiceUpsertMemoReactionProcedure,
			connect.WithSchema(memoServiceMethods.ByName("UpsertMemoReaction")),
			connect.WithClientOptions(opts...),
		),
		deleteMemoReaction: connect.NewClient[DeleteMemoReactionRequest, emptypb.Empty](
			httpClient,
			baseURL+MemoServiceDeleteMemoReactionProcedure,
			connect.WithSchema(memoServiceMethods.ByName("DeleteMemoReaction")),
			connect.WithClientOptions(opts...),
		),
		createMemoComment: connect.NewClient[CreateMemoCommentRequest, model.Memo](
			httpClient,
			baseURL+MemoServiceCreateMemoCommentProcedure,
			connect.WithSchema(memoServiceMethods.ByName("CreateMemoComment")),
			connect.WithClientOptions(opts...),
		),
		listMemoComments: connect.NewClient[ListMemoCommentsRequest, ListMemoCommentsResponse](
			httpClient,
			baseURL+MemoServiceListMemoCommentsProcedure,
			connect.WithSchema(memoServiceMethods.ByName("ListMemoComments")),
			connect.WithClientOptions(opts...),
		),
	}
}

// memoServiceClient implements MemoServiceClient.
type memoServiceClient struct {
	createMemo         *connect.Client[CreateMemoRequest, model.Memo]
	listMemos          *connect.Client[ListMemosRequest, ListMemosResponse]
	getMemo            *connect.Client[GetMemoRequest, model.Memo]
	updateMemo         *connect.Client[UpdateMemoRequest, model.Memo]
	deleteMemo         *connect.Client[DeleteMemoRequest, emptypb.Empty]
	upsertMemoReaction *connect.Client[UpsertMemoReactionRequest, model.Reaction]
	deleteMemoReaction *connect.Client[DeleteMemoReactionRequest, emptypb.Empty]
	createMemoComment  *connect.Client[CreateMemoCommentRequest, model.Memo]
	listMemoComments   *connect.Client[ListMemoCommentsRequest, ListMemoCommentsResponse]
}

// CreateMemo calls api.v2.MemoService.CreateMemo.
func (c *memoServiceClient) CreateMemo(ctx context.Context, req *connect.Request[CreateMemoRequest]) (*connect.Response[model.Memo], error) {
	return c.createMemo.CallUnary(ctx, req)
}

// ListMemos calls api.v2.MemoService.ListMemos.
func (c *memoServiceClient) ListMemos(ctx context.Context, req *connect.Request[ListMemosRequest]) (*connect.Response[ListMemosResponse], error) {
	return c.listMemos.CallUnary(ctx, req)
}

// GetMemo calls api.v2.MemoService.GetMemo.
func (c *memoServiceClient) GetMemo(ctx context.Context, req *connect.Request[GetMemoRequest]) (*connect.Response[model.Memo], error) {
	return c.getMemo.CallUnary(ctx, req)
}

// UpdateMemo calls api.v2.MemoService.UpdateMemo.
func (c *memoServiceClient) UpdateMemo(ctx context.Context, req *connect.Request[UpdateMemoRequest]) (*connect.Response[model.Memo], error) {
	return c.updateMemo.CallUnary(ctx, req)
}

// DeleteMemo calls api.v2.MemoService.DeleteMemo.
func (c *memoServiceClient) DeleteMemo(ctx context.Context, req *connect.Request[DeleteMemoRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteMemo.CallUnary(ctx, req)
}

// UpsertMemoReaction calls api.v2.MemoService.UpsertMemoReaction.
func (c *memoServiceClient) UpsertMemoReaction(ctx context.Context, req *connect.Request[UpsertMemoReactionRequest]) (*connect.Response[model.Reaction], error) {
	return c.upsertMemoReaction.CallUnary(ctx, req)
}

// DeleteMemoReaction calls api.v2.MemoService.DeleteMemoReaction.
func (c *memoServiceClient) DeleteMemoReaction(ctx context.Context, req *connect.Request[DeleteMemoReactionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteMemoReaction.CallUnary(ctx, req)
}

// CreateMemoComment calls api.v2.MemoService.CreateMemoComment.
func (c *memoServiceClient) CreateMemoComment(ctx context.Context, req *connect.Request[CreateMemoCommentRequest]) (*connect.Response[model.Memo], error) {
	return c.createMemoComment.CallUnary(ctx, req)
}

// ListMemoComments calls api.v2.MemoService.ListMemoComments.
func (c *memoServiceClient) ListMemoComments(ctx context.Context, req *connect.Request[ListMemoCommentsRequest]) (*connect.Response[ListMemoCommentsResponse], error) {
	return c.listMemoComments.CallUnary(ctx, req)
}

// MemoServiceHandler is an implementation of the api.v2.MemoService service.
type MemoServiceHandler interface {
	// CreateMemo creates a memo.
	CreateMemo(context.Context, *connect.Request[CreateMemoRequest]) (*connect.Response[model.Memo], error)
	// ListMemos lists memos with pagination and filter.
	ListMemos(context.Context, *connect.Request[ListMemosRequest]) (*connect.Response[ListMemosResponse], error)
	// GetMemo gets a memo.
	GetMemo(context.Context, *connect.Request[GetMemoRequest]) (*connect.Response[model.Memo], error)
	// UpdateMemo updates a memo.
	UpdateMemo(context.Context, *connect.Request[UpdateMemoRequest]) (*connect.Response[model.Memo], error)
	// DeleteMemo deletes a memo.
	DeleteMemo(context.Context, *connect.Request[DeleteMemoRequest]) (*connect.Response[emptypb.Empty], error)
	// UpsertMemoReaction upserts a reaction for a memo.
	UpsertMemoReaction(context.Context, *connect.Request[UpsertMemoReactionRequest]) (*connect.Response[model.Reaction], error)
	// DeleteMemoReaction deletes a reaction for a memo.
	DeleteMemoReaction(context.Context, *connect.Request[DeleteMemoReactionRequest]) (*connect.Response[emptypb.Empty], error)
	// CreateMemoComment creates a comment for a memo.
	CreateMemoComment(context.Context, *connect.Request[CreateMemoCommentRequest]) (*connect.Response[model.Memo], error)
	// ListMemoComments lists comments for a memo.
	ListMemoComments(context.Context, *connect.Request[ListMemoCommentsRequest]) (*connect.Response[ListMemoCommentsResponse], error)
}

// NewMemoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMemoServiceHandler(svc MemoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	memoServiceMethods := File_api_v2_memo_proto.Services().ByName("MemoService").Methods()
	memoServiceCreateMemoHandler := connect.NewUnaryHandler(
		MemoServiceCreateMemoProcedure,
		svc.CreateMemo,
		connect.WithSchema(memoServiceMethods.ByName("CreateMemo")),
		connect.WithHandlerOptions(opts...),
	)
	memoServiceListMemosHandler := connect.NewUnaryHandler(
		MemoServiceListMemosProcedure,
		svc.ListMemos,
		connect.WithSchema(memoServiceMethods.ByName("ListMemos")),
		connect.WithHandlerOptions(opts...),
	)
	memoServiceGetMemoHandler := connect.NewUnaryHandler(
		MemoServiceGetMemoProcedure,
		svc.GetMemo,
		connect.WithSchema(memoServiceMethods.ByName("GetMemo")),
		connect.WithHandlerOptions(opts...),
	)
	memoServiceUpdateMemoHandler := connect.NewUnaryHandler(
		MemoServiceUpdateMemoProcedure,
		svc.UpdateMemo,
		connect.WithSchema(memoServiceMethods.ByName("UpdateMemo")),
		connect.WithHandlerOptions(opts...),
	)
	memoServiceDeleteMemoHandler := connect.NewUnaryHandler(
		MemoServiceDeleteMemoProcedure,
		svc.DeleteMemo,
		connect.WithSchema(memoServiceMethods.ByName("DeleteMemo")),
		connect.WithHandlerOptions(opts...),
	)
	memoServiceUpsertMemoReactionHandler := connect.NewUnaryHandler(
		MemoServiceUpsertMemoReactionProcedure,
		svc.UpsertMemoReaction,
		connect.WithSchema(memoServiceMethods.ByName("UpsertMemoReaction")),
		connect.WithHandlerOptions(opts...),
	)
	memoServiceDeleteMemoReactionHandler := connect.NewUnaryHandler(
		MemoServiceDeleteMemoReactionProcedure,
		svc.DeleteMemoReaction,
		connect.WithSchema(memoServiceMethods.ByName("DeleteMemoReaction")),
		connect.WithHandlerOptions(opts...),
	)
	memoServiceCreateMemoCommentHandler := connect.NewUnaryHandler(
		MemoServiceCreateMemoCommentProcedure,
		svc.CreateMemoComment,
		connect.WithSchema(memoServiceMethods.ByName("CreateMemoComment")),
		connect.WithHandlerOptions(opts...),
	)
	memoServiceListMemoCommentsHandler := connect.NewUnaryHandler(
		MemoServiceListMemoCommentsProcedure,
		svc.ListMemoComments,
		connect.WithSchema(memoServiceMethods.ByName("ListMemoComments")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v2.MemoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MemoServiceCreateMemoProcedure:
			memoServiceCreateMemoHandler.ServeHTTP(w, r)
		case MemoServiceListMemosProcedure:
			memoServiceListMemosHandler.ServeHTTP(w, r)
		case MemoServiceGetMemoProcedure:
			memoServiceGetMemoHandler.ServeHTTP(w, r)
		case MemoServiceUpdateMemoProcedure:
			memoServiceUpdateMemoHandler.ServeHTTP(w, r)
		case MemoServiceDeleteMemoProcedure:
			memoServiceDeleteMemoHandler.ServeHTTP(w, r)
		case MemoServiceUpsertMemoReactionProcedure:
			memoServiceUpsertMemoReactionHandler.ServeHTTP(w, r)
		case MemoServiceDeleteMemoReactionProcedure:
			memoServiceDeleteMemoReactionHandler.ServeHTTP(w, r)
		case MemoServiceCreateMemoCommentProcedure:
			memoServiceCreateMemoCommentHandler.ServeHTTP(w, r)
		case MemoServiceListMemoCommentsProcedure:
			memoServiceListMemoCommentsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMemoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMemoServiceHandler struct{}

func (UnimplementedMemoServiceHandler) CreateMemo(context.Context, *connect.Request[CreateMemoRequest]) (*connect.Response[model.Memo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.MemoService.CreateMemo is not implemented"))
}

func (UnimplementedMemoServiceHandler) ListMemos(context.Context, *connect.Request[ListMemosRequest]) (*connect.Response[ListMemosResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.MemoService.ListMemos is not implemented"))
}

func (UnimplementedMemoServiceHandler) GetMemo(context.Context, *connect.Request[GetMemoRequest]) (*connect.Response[model.Memo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.MemoService.GetMemo is not implemented"))
}

func (UnimplementedMemoServiceHandler) UpdateMemo(context.Context, *connect.Request[UpdateMemoRequest]) (*connect.Response[model.Memo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.MemoService.UpdateMemo is not implemented"))
}

func (UnimplementedMemoServiceHandler) DeleteMemo(context.Context, *connect.Request[DeleteMemoRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.MemoService.DeleteMemo is not implemented"))
}

func (UnimplementedMemoServiceHandler) UpsertMemoReaction(context.Context, *connect.Request[UpsertMemoReactionRequest]) (*connect.Response[model.Reaction], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.MemoService.UpsertMemoReaction is not implemented"))
}

func (UnimplementedMemoServiceHandler) DeleteMemoReaction(context.Context, *connect.Request[DeleteMemoReactionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.MemoService.DeleteMemoReaction is not implemented"))
}

func (UnimplementedMemoServiceHandler) CreateMemoComment(context.Context, *connect.Request[CreateMemoCommentRequest]) (*connect.Response[model.Memo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.MemoService.CreateMemoComment is not implemented"))
}

func (UnimplementedMemoServiceHandler) ListMemoComments(context.Context, *connect.Request[ListMemoCommentsRequest]) (*connect.Response[ListMemoCommentsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.MemoService.ListMemoComments is not implemented"))
}
