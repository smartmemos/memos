// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v2/memo.proto

package v2

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	model "github.com/smartmemos/memos/internal/proto/model"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MemoServiceName is the fully-qualified name of the MemoService service.
	MemoServiceName = "api.v2.MemoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MemoServiceCreateMemoProcedure is the fully-qualified name of the MemoService's CreateMemo RPC.
	MemoServiceCreateMemoProcedure = "/api.v2.MemoService/CreateMemo"
)

// MemoServiceClient is a client for the api.v2.MemoService service.
type MemoServiceClient interface {
	// CreateMemo creates a memo.
	CreateMemo(context.Context, *connect.Request[CreateMemoRequest]) (*connect.Response[model.Memo], error)
}

// NewMemoServiceClient constructs a client for the api.v2.MemoService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMemoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MemoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	memoServiceMethods := File_api_v2_memo_proto.Services().ByName("MemoService").Methods()
	return &memoServiceClient{
		createMemo: connect.NewClient[CreateMemoRequest, model.Memo](
			httpClient,
			baseURL+MemoServiceCreateMemoProcedure,
			connect.WithSchema(memoServiceMethods.ByName("CreateMemo")),
			connect.WithClientOptions(opts...),
		),
	}
}

// memoServiceClient implements MemoServiceClient.
type memoServiceClient struct {
	createMemo *connect.Client[CreateMemoRequest, model.Memo]
}

// CreateMemo calls api.v2.MemoService.CreateMemo.
func (c *memoServiceClient) CreateMemo(ctx context.Context, req *connect.Request[CreateMemoRequest]) (*connect.Response[model.Memo], error) {
	return c.createMemo.CallUnary(ctx, req)
}

// MemoServiceHandler is an implementation of the api.v2.MemoService service.
type MemoServiceHandler interface {
	// CreateMemo creates a memo.
	CreateMemo(context.Context, *connect.Request[CreateMemoRequest]) (*connect.Response[model.Memo], error)
}

// NewMemoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMemoServiceHandler(svc MemoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	memoServiceMethods := File_api_v2_memo_proto.Services().ByName("MemoService").Methods()
	memoServiceCreateMemoHandler := connect.NewUnaryHandler(
		MemoServiceCreateMemoProcedure,
		svc.CreateMemo,
		connect.WithSchema(memoServiceMethods.ByName("CreateMemo")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v2.MemoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MemoServiceCreateMemoProcedure:
			memoServiceCreateMemoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMemoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedMemoServiceHandler struct{}

func (UnimplementedMemoServiceHandler) CreateMemo(context.Context, *connect.Request[CreateMemoRequest]) (*connect.Response[model.Memo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.MemoService.CreateMemo is not implemented"))
}
