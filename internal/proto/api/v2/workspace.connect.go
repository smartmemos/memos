// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v2/workspace.proto

package v2

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	model "github.com/smartmemos/memos/internal/proto/model"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkspaceServiceName is the fully-qualified name of the WorkspaceService service.
	WorkspaceServiceName = "api.v2.WorkspaceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkspaceServiceGetWorkspaceProfileProcedure is the fully-qualified name of the
	// WorkspaceService's GetWorkspaceProfile RPC.
	WorkspaceServiceGetWorkspaceProfileProcedure = "/api.v2.WorkspaceService/GetWorkspaceProfile"
	// WorkspaceServiceGetWorkspaceSettingProcedure is the fully-qualified name of the
	// WorkspaceService's GetWorkspaceSetting RPC.
	WorkspaceServiceGetWorkspaceSettingProcedure = "/api.v2.WorkspaceService/GetWorkspaceSetting"
	// WorkspaceServiceUpdateWorkspaceSettingProcedure is the fully-qualified name of the
	// WorkspaceService's UpdateWorkspaceSetting RPC.
	WorkspaceServiceUpdateWorkspaceSettingProcedure = "/api.v2.WorkspaceService/UpdateWorkspaceSetting"
)

// WorkspaceServiceClient is a client for the api.v2.WorkspaceService service.
type WorkspaceServiceClient interface {
	// Gets the workspace profile.
	GetWorkspaceProfile(context.Context, *connect.Request[GetWorkspaceProfileRequest]) (*connect.Response[model.WorkspaceProfile], error)
	// Gets a workspace setting.
	GetWorkspaceSetting(context.Context, *connect.Request[GetWorkspaceSettingRequest]) (*connect.Response[model.WorkspaceSetting], error)
	// Updates a workspace setting.
	UpdateWorkspaceSetting(context.Context, *connect.Request[UpdateWorkspaceSettingRequest]) (*connect.Response[model.WorkspaceSetting], error)
}

// NewWorkspaceServiceClient constructs a client for the api.v2.WorkspaceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkspaceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkspaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workspaceServiceMethods := File_api_v2_workspace_proto.Services().ByName("WorkspaceService").Methods()
	return &workspaceServiceClient{
		getWorkspaceProfile: connect.NewClient[GetWorkspaceProfileRequest, model.WorkspaceProfile](
			httpClient,
			baseURL+WorkspaceServiceGetWorkspaceProfileProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("GetWorkspaceProfile")),
			connect.WithClientOptions(opts...),
		),
		getWorkspaceSetting: connect.NewClient[GetWorkspaceSettingRequest, model.WorkspaceSetting](
			httpClient,
			baseURL+WorkspaceServiceGetWorkspaceSettingProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("GetWorkspaceSetting")),
			connect.WithClientOptions(opts...),
		),
		updateWorkspaceSetting: connect.NewClient[UpdateWorkspaceSettingRequest, model.WorkspaceSetting](
			httpClient,
			baseURL+WorkspaceServiceUpdateWorkspaceSettingProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("UpdateWorkspaceSetting")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workspaceServiceClient implements WorkspaceServiceClient.
type workspaceServiceClient struct {
	getWorkspaceProfile    *connect.Client[GetWorkspaceProfileRequest, model.WorkspaceProfile]
	getWorkspaceSetting    *connect.Client[GetWorkspaceSettingRequest, model.WorkspaceSetting]
	updateWorkspaceSetting *connect.Client[UpdateWorkspaceSettingRequest, model.WorkspaceSetting]
}

// GetWorkspaceProfile calls api.v2.WorkspaceService.GetWorkspaceProfile.
func (c *workspaceServiceClient) GetWorkspaceProfile(ctx context.Context, req *connect.Request[GetWorkspaceProfileRequest]) (*connect.Response[model.WorkspaceProfile], error) {
	return c.getWorkspaceProfile.CallUnary(ctx, req)
}

// GetWorkspaceSetting calls api.v2.WorkspaceService.GetWorkspaceSetting.
func (c *workspaceServiceClient) GetWorkspaceSetting(ctx context.Context, req *connect.Request[GetWorkspaceSettingRequest]) (*connect.Response[model.WorkspaceSetting], error) {
	return c.getWorkspaceSetting.CallUnary(ctx, req)
}

// UpdateWorkspaceSetting calls api.v2.WorkspaceService.UpdateWorkspaceSetting.
func (c *workspaceServiceClient) UpdateWorkspaceSetting(ctx context.Context, req *connect.Request[UpdateWorkspaceSettingRequest]) (*connect.Response[model.WorkspaceSetting], error) {
	return c.updateWorkspaceSetting.CallUnary(ctx, req)
}

// WorkspaceServiceHandler is an implementation of the api.v2.WorkspaceService service.
type WorkspaceServiceHandler interface {
	// Gets the workspace profile.
	GetWorkspaceProfile(context.Context, *connect.Request[GetWorkspaceProfileRequest]) (*connect.Response[model.WorkspaceProfile], error)
	// Gets a workspace setting.
	GetWorkspaceSetting(context.Context, *connect.Request[GetWorkspaceSettingRequest]) (*connect.Response[model.WorkspaceSetting], error)
	// Updates a workspace setting.
	UpdateWorkspaceSetting(context.Context, *connect.Request[UpdateWorkspaceSettingRequest]) (*connect.Response[model.WorkspaceSetting], error)
}

// NewWorkspaceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkspaceServiceHandler(svc WorkspaceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workspaceServiceMethods := File_api_v2_workspace_proto.Services().ByName("WorkspaceService").Methods()
	workspaceServiceGetWorkspaceProfileHandler := connect.NewUnaryHandler(
		WorkspaceServiceGetWorkspaceProfileProcedure,
		svc.GetWorkspaceProfile,
		connect.WithSchema(workspaceServiceMethods.ByName("GetWorkspaceProfile")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceGetWorkspaceSettingHandler := connect.NewUnaryHandler(
		WorkspaceServiceGetWorkspaceSettingProcedure,
		svc.GetWorkspaceSetting,
		connect.WithSchema(workspaceServiceMethods.ByName("GetWorkspaceSetting")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceUpdateWorkspaceSettingHandler := connect.NewUnaryHandler(
		WorkspaceServiceUpdateWorkspaceSettingProcedure,
		svc.UpdateWorkspaceSetting,
		connect.WithSchema(workspaceServiceMethods.ByName("UpdateWorkspaceSetting")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v2.WorkspaceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkspaceServiceGetWorkspaceProfileProcedure:
			workspaceServiceGetWorkspaceProfileHandler.ServeHTTP(w, r)
		case WorkspaceServiceGetWorkspaceSettingProcedure:
			workspaceServiceGetWorkspaceSettingHandler.ServeHTTP(w, r)
		case WorkspaceServiceUpdateWorkspaceSettingProcedure:
			workspaceServiceUpdateWorkspaceSettingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkspaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkspaceServiceHandler struct{}

func (UnimplementedWorkspaceServiceHandler) GetWorkspaceProfile(context.Context, *connect.Request[GetWorkspaceProfileRequest]) (*connect.Response[model.WorkspaceProfile], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.WorkspaceService.GetWorkspaceProfile is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) GetWorkspaceSetting(context.Context, *connect.Request[GetWorkspaceSettingRequest]) (*connect.Response[model.WorkspaceSetting], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.WorkspaceService.GetWorkspaceSetting is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) UpdateWorkspaceSetting(context.Context, *connect.Request[UpdateWorkspaceSettingRequest]) (*connect.Response[model.WorkspaceSetting], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.WorkspaceService.UpdateWorkspaceSetting is not implemented"))
}
