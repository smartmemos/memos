// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v2/user.proto

package v2

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	model "github.com/smartmemos/memos/internal/proto/model"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "api.v2.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/api.v2.UserService/CreateUser"
	// UserServiceGetUserStatsProcedure is the fully-qualified name of the UserService's GetUserStats
	// RPC.
	UserServiceGetUserStatsProcedure = "/api.v2.UserService/GetUserStats"
)

// UserServiceClient is a client for the api.v2.UserService service.
type UserServiceClient interface {
	// CreateUser creates a new user.
	CreateUser(context.Context, *connect.Request[CreateUserRequest]) (*connect.Response[model.User], error)
	// GetUserStats returns statistics for a specific user.
	GetUserStats(context.Context, *connect.Request[GetUserStatsRequest]) (*connect.Response[UserStats], error)
}

// NewUserServiceClient constructs a client for the api.v2.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := File_api_v2_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		createUser: connect.NewClient[CreateUserRequest, model.User](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		getUserStats: connect.NewClient[GetUserStatsRequest, UserStats](
			httpClient,
			baseURL+UserServiceGetUserStatsProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserStats")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	createUser   *connect.Client[CreateUserRequest, model.User]
	getUserStats *connect.Client[GetUserStatsRequest, UserStats]
}

// CreateUser calls api.v2.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect.Request[CreateUserRequest]) (*connect.Response[model.User], error) {
	return c.createUser.CallUnary(ctx, req)
}

// GetUserStats calls api.v2.UserService.GetUserStats.
func (c *userServiceClient) GetUserStats(ctx context.Context, req *connect.Request[GetUserStatsRequest]) (*connect.Response[UserStats], error) {
	return c.getUserStats.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the api.v2.UserService service.
type UserServiceHandler interface {
	// CreateUser creates a new user.
	CreateUser(context.Context, *connect.Request[CreateUserRequest]) (*connect.Response[model.User], error)
	// GetUserStats returns statistics for a specific user.
	GetUserStats(context.Context, *connect.Request[GetUserStatsRequest]) (*connect.Response[UserStats], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := File_api_v2_user_proto.Services().ByName("UserService").Methods()
	userServiceCreateUserHandler := connect.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserStatsHandler := connect.NewUnaryHandler(
		UserServiceGetUserStatsProcedure,
		svc.GetUserStats,
		connect.WithSchema(userServiceMethods.ByName("GetUserStats")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v2.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceCreateUserProcedure:
			userServiceCreateUserHandler.ServeHTTP(w, r)
		case UserServiceGetUserStatsProcedure:
			userServiceGetUserStatsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect.Request[CreateUserRequest]) (*connect.Response[model.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserStats(context.Context, *connect.Request[GetUserStatsRequest]) (*connect.Response[UserStats], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.GetUserStats is not implemented"))
}
