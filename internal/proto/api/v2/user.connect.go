// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v2/user.proto

package v2

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	model "github.com/smartmemos/memos/internal/proto/model"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "api.v2.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceCreateUserProcedure is the fully-qualified name of the UserService's CreateUser RPC.
	UserServiceCreateUserProcedure = "/api.v2.UserService/CreateUser"
	// UserServiceUpdateUserProcedure is the fully-qualified name of the UserService's UpdateUser RPC.
	UserServiceUpdateUserProcedure = "/api.v2.UserService/UpdateUser"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/api.v2.UserService/GetUser"
	// UserServiceSearchUsersProcedure is the fully-qualified name of the UserService's SearchUsers RPC.
	UserServiceSearchUsersProcedure = "/api.v2.UserService/SearchUsers"
	// UserServiceListUsersProcedure is the fully-qualified name of the UserService's ListUsers RPC.
	UserServiceListUsersProcedure = "/api.v2.UserService/ListUsers"
	// UserServiceGetUserStatsProcedure is the fully-qualified name of the UserService's GetUserStats
	// RPC.
	UserServiceGetUserStatsProcedure = "/api.v2.UserService/GetUserStats"
	// UserServiceGetUserSettingProcedure is the fully-qualified name of the UserService's
	// GetUserSetting RPC.
	UserServiceGetUserSettingProcedure = "/api.v2.UserService/GetUserSetting"
	// UserServiceUpdateUserSettingProcedure is the fully-qualified name of the UserService's
	// UpdateUserSetting RPC.
	UserServiceUpdateUserSettingProcedure = "/api.v2.UserService/UpdateUserSetting"
	// UserServiceListUserSettingsProcedure is the fully-qualified name of the UserService's
	// ListUserSettings RPC.
	UserServiceListUserSettingsProcedure = "/api.v2.UserService/ListUserSettings"
	// UserServiceListUserSessionsProcedure is the fully-qualified name of the UserService's
	// ListUserSessions RPC.
	UserServiceListUserSessionsProcedure = "/api.v2.UserService/ListUserSessions"
	// UserServiceRevokeUserSessionProcedure is the fully-qualified name of the UserService's
	// RevokeUserSession RPC.
	UserServiceRevokeUserSessionProcedure = "/api.v2.UserService/RevokeUserSession"
)

// UserServiceClient is a client for the api.v2.UserService service.
type UserServiceClient interface {
	// CreateUser creates a new user.
	CreateUser(context.Context, *connect.Request[CreateUserRequest]) (*connect.Response[model.User], error)
	// UpdateUser updates a user.
	UpdateUser(context.Context, *connect.Request[UpdateUserRequest]) (*connect.Response[model.User], error)
	// GetUser gets a user by name.
	GetUser(context.Context, *connect.Request[GetUserRequest]) (*connect.Response[model.User], error)
	// SearchUsers searches for users based on query.
	SearchUsers(context.Context, *connect.Request[SearchUsersRequest]) (*connect.Response[SearchUsersResponse], error)
	// ListUsers returns a list of users.
	ListUsers(context.Context, *connect.Request[ListUsersRequest]) (*connect.Response[ListUsersResponse], error)
	// GetUserStats returns statistics for a specific user.
	GetUserStats(context.Context, *connect.Request[GetUserStatsRequest]) (*connect.Response[UserStats], error)
	// GetUserSetting returns the user setting.
	GetUserSetting(context.Context, *connect.Request[GetUserSettingRequest]) (*connect.Response[model.UserSetting], error)
	// UpdateUserSetting updates the user setting.
	UpdateUserSetting(context.Context, *connect.Request[UpdateUserSettingRequest]) (*connect.Response[model.UserSetting], error)
	// ListUserSettings returns a list of user settings.
	ListUserSettings(context.Context, *connect.Request[ListUserSettingsRequest]) (*connect.Response[ListUserSettingsResponse], error)
	// ListUserSessions returns a list of active sessions for a user.
	ListUserSessions(context.Context, *connect.Request[ListUserSessionsRequest]) (*connect.Response[ListUserSessionsResponse], error)
	// RevokeUserSession revokes a specific session for a user.
	RevokeUserSession(context.Context, *connect.Request[RevokeUserSessionRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewUserServiceClient constructs a client for the api.v2.UserService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := File_api_v2_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		createUser: connect.NewClient[CreateUserRequest, model.User](
			httpClient,
			baseURL+UserServiceCreateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("CreateUser")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[UpdateUserRequest, model.User](
			httpClient,
			baseURL+UserServiceUpdateUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[GetUserRequest, model.User](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		searchUsers: connect.NewClient[SearchUsersRequest, SearchUsersResponse](
			httpClient,
			baseURL+UserServiceSearchUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("SearchUsers")),
			connect.WithClientOptions(opts...),
		),
		listUsers: connect.NewClient[ListUsersRequest, ListUsersResponse](
			httpClient,
			baseURL+UserServiceListUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListUsers")),
			connect.WithClientOptions(opts...),
		),
		getUserStats: connect.NewClient[GetUserStatsRequest, UserStats](
			httpClient,
			baseURL+UserServiceGetUserStatsProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserStats")),
			connect.WithClientOptions(opts...),
		),
		getUserSetting: connect.NewClient[GetUserSettingRequest, model.UserSetting](
			httpClient,
			baseURL+UserServiceGetUserSettingProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUserSetting")),
			connect.WithClientOptions(opts...),
		),
		updateUserSetting: connect.NewClient[UpdateUserSettingRequest, model.UserSetting](
			httpClient,
			baseURL+UserServiceUpdateUserSettingProcedure,
			connect.WithSchema(userServiceMethods.ByName("UpdateUserSetting")),
			connect.WithClientOptions(opts...),
		),
		listUserSettings: connect.NewClient[ListUserSettingsRequest, ListUserSettingsResponse](
			httpClient,
			baseURL+UserServiceListUserSettingsProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListUserSettings")),
			connect.WithClientOptions(opts...),
		),
		listUserSessions: connect.NewClient[ListUserSessionsRequest, ListUserSessionsResponse](
			httpClient,
			baseURL+UserServiceListUserSessionsProcedure,
			connect.WithSchema(userServiceMethods.ByName("ListUserSessions")),
			connect.WithClientOptions(opts...),
		),
		revokeUserSession: connect.NewClient[RevokeUserSessionRequest, emptypb.Empty](
			httpClient,
			baseURL+UserServiceRevokeUserSessionProcedure,
			connect.WithSchema(userServiceMethods.ByName("RevokeUserSession")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	createUser        *connect.Client[CreateUserRequest, model.User]
	updateUser        *connect.Client[UpdateUserRequest, model.User]
	getUser           *connect.Client[GetUserRequest, model.User]
	searchUsers       *connect.Client[SearchUsersRequest, SearchUsersResponse]
	listUsers         *connect.Client[ListUsersRequest, ListUsersResponse]
	getUserStats      *connect.Client[GetUserStatsRequest, UserStats]
	getUserSetting    *connect.Client[GetUserSettingRequest, model.UserSetting]
	updateUserSetting *connect.Client[UpdateUserSettingRequest, model.UserSetting]
	listUserSettings  *connect.Client[ListUserSettingsRequest, ListUserSettingsResponse]
	listUserSessions  *connect.Client[ListUserSessionsRequest, ListUserSessionsResponse]
	revokeUserSession *connect.Client[RevokeUserSessionRequest, emptypb.Empty]
}

// CreateUser calls api.v2.UserService.CreateUser.
func (c *userServiceClient) CreateUser(ctx context.Context, req *connect.Request[CreateUserRequest]) (*connect.Response[model.User], error) {
	return c.createUser.CallUnary(ctx, req)
}

// UpdateUser calls api.v2.UserService.UpdateUser.
func (c *userServiceClient) UpdateUser(ctx context.Context, req *connect.Request[UpdateUserRequest]) (*connect.Response[model.User], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// GetUser calls api.v2.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[GetUserRequest]) (*connect.Response[model.User], error) {
	return c.getUser.CallUnary(ctx, req)
}

// SearchUsers calls api.v2.UserService.SearchUsers.
func (c *userServiceClient) SearchUsers(ctx context.Context, req *connect.Request[SearchUsersRequest]) (*connect.Response[SearchUsersResponse], error) {
	return c.searchUsers.CallUnary(ctx, req)
}

// ListUsers calls api.v2.UserService.ListUsers.
func (c *userServiceClient) ListUsers(ctx context.Context, req *connect.Request[ListUsersRequest]) (*connect.Response[ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// GetUserStats calls api.v2.UserService.GetUserStats.
func (c *userServiceClient) GetUserStats(ctx context.Context, req *connect.Request[GetUserStatsRequest]) (*connect.Response[UserStats], error) {
	return c.getUserStats.CallUnary(ctx, req)
}

// GetUserSetting calls api.v2.UserService.GetUserSetting.
func (c *userServiceClient) GetUserSetting(ctx context.Context, req *connect.Request[GetUserSettingRequest]) (*connect.Response[model.UserSetting], error) {
	return c.getUserSetting.CallUnary(ctx, req)
}

// UpdateUserSetting calls api.v2.UserService.UpdateUserSetting.
func (c *userServiceClient) UpdateUserSetting(ctx context.Context, req *connect.Request[UpdateUserSettingRequest]) (*connect.Response[model.UserSetting], error) {
	return c.updateUserSetting.CallUnary(ctx, req)
}

// ListUserSettings calls api.v2.UserService.ListUserSettings.
func (c *userServiceClient) ListUserSettings(ctx context.Context, req *connect.Request[ListUserSettingsRequest]) (*connect.Response[ListUserSettingsResponse], error) {
	return c.listUserSettings.CallUnary(ctx, req)
}

// ListUserSessions calls api.v2.UserService.ListUserSessions.
func (c *userServiceClient) ListUserSessions(ctx context.Context, req *connect.Request[ListUserSessionsRequest]) (*connect.Response[ListUserSessionsResponse], error) {
	return c.listUserSessions.CallUnary(ctx, req)
}

// RevokeUserSession calls api.v2.UserService.RevokeUserSession.
func (c *userServiceClient) RevokeUserSession(ctx context.Context, req *connect.Request[RevokeUserSessionRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.revokeUserSession.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the api.v2.UserService service.
type UserServiceHandler interface {
	// CreateUser creates a new user.
	CreateUser(context.Context, *connect.Request[CreateUserRequest]) (*connect.Response[model.User], error)
	// UpdateUser updates a user.
	UpdateUser(context.Context, *connect.Request[UpdateUserRequest]) (*connect.Response[model.User], error)
	// GetUser gets a user by name.
	GetUser(context.Context, *connect.Request[GetUserRequest]) (*connect.Response[model.User], error)
	// SearchUsers searches for users based on query.
	SearchUsers(context.Context, *connect.Request[SearchUsersRequest]) (*connect.Response[SearchUsersResponse], error)
	// ListUsers returns a list of users.
	ListUsers(context.Context, *connect.Request[ListUsersRequest]) (*connect.Response[ListUsersResponse], error)
	// GetUserStats returns statistics for a specific user.
	GetUserStats(context.Context, *connect.Request[GetUserStatsRequest]) (*connect.Response[UserStats], error)
	// GetUserSetting returns the user setting.
	GetUserSetting(context.Context, *connect.Request[GetUserSettingRequest]) (*connect.Response[model.UserSetting], error)
	// UpdateUserSetting updates the user setting.
	UpdateUserSetting(context.Context, *connect.Request[UpdateUserSettingRequest]) (*connect.Response[model.UserSetting], error)
	// ListUserSettings returns a list of user settings.
	ListUserSettings(context.Context, *connect.Request[ListUserSettingsRequest]) (*connect.Response[ListUserSettingsResponse], error)
	// ListUserSessions returns a list of active sessions for a user.
	ListUserSessions(context.Context, *connect.Request[ListUserSessionsRequest]) (*connect.Response[ListUserSessionsResponse], error)
	// RevokeUserSession revokes a specific session for a user.
	RevokeUserSession(context.Context, *connect.Request[RevokeUserSessionRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := File_api_v2_user_proto.Services().ByName("UserService").Methods()
	userServiceCreateUserHandler := connect.NewUnaryHandler(
		UserServiceCreateUserProcedure,
		svc.CreateUser,
		connect.WithSchema(userServiceMethods.ByName("CreateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceSearchUsersHandler := connect.NewUnaryHandler(
		UserServiceSearchUsersProcedure,
		svc.SearchUsers,
		connect.WithSchema(userServiceMethods.ByName("SearchUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUsersHandler := connect.NewUnaryHandler(
		UserServiceListUsersProcedure,
		svc.ListUsers,
		connect.WithSchema(userServiceMethods.ByName("ListUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserStatsHandler := connect.NewUnaryHandler(
		UserServiceGetUserStatsProcedure,
		svc.GetUserStats,
		connect.WithSchema(userServiceMethods.ByName("GetUserStats")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserSettingHandler := connect.NewUnaryHandler(
		UserServiceGetUserSettingProcedure,
		svc.GetUserSetting,
		connect.WithSchema(userServiceMethods.ByName("GetUserSetting")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceUpdateUserSettingHandler := connect.NewUnaryHandler(
		UserServiceUpdateUserSettingProcedure,
		svc.UpdateUserSetting,
		connect.WithSchema(userServiceMethods.ByName("UpdateUserSetting")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUserSettingsHandler := connect.NewUnaryHandler(
		UserServiceListUserSettingsProcedure,
		svc.ListUserSettings,
		connect.WithSchema(userServiceMethods.ByName("ListUserSettings")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceListUserSessionsHandler := connect.NewUnaryHandler(
		UserServiceListUserSessionsProcedure,
		svc.ListUserSessions,
		connect.WithSchema(userServiceMethods.ByName("ListUserSessions")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRevokeUserSessionHandler := connect.NewUnaryHandler(
		UserServiceRevokeUserSessionProcedure,
		svc.RevokeUserSession,
		connect.WithSchema(userServiceMethods.ByName("RevokeUserSession")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v2.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceCreateUserProcedure:
			userServiceCreateUserHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserProcedure:
			userServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServiceSearchUsersProcedure:
			userServiceSearchUsersHandler.ServeHTTP(w, r)
		case UserServiceListUsersProcedure:
			userServiceListUsersHandler.ServeHTTP(w, r)
		case UserServiceGetUserStatsProcedure:
			userServiceGetUserStatsHandler.ServeHTTP(w, r)
		case UserServiceGetUserSettingProcedure:
			userServiceGetUserSettingHandler.ServeHTTP(w, r)
		case UserServiceUpdateUserSettingProcedure:
			userServiceUpdateUserSettingHandler.ServeHTTP(w, r)
		case UserServiceListUserSettingsProcedure:
			userServiceListUserSettingsHandler.ServeHTTP(w, r)
		case UserServiceListUserSessionsProcedure:
			userServiceListUserSessionsHandler.ServeHTTP(w, r)
		case UserServiceRevokeUserSessionProcedure:
			userServiceRevokeUserSessionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) CreateUser(context.Context, *connect.Request[CreateUserRequest]) (*connect.Response[model.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.CreateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUser(context.Context, *connect.Request[UpdateUserRequest]) (*connect.Response[model.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.UpdateUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[GetUserRequest]) (*connect.Response[model.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) SearchUsers(context.Context, *connect.Request[SearchUsersRequest]) (*connect.Response[SearchUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.SearchUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUsers(context.Context, *connect.Request[ListUsersRequest]) (*connect.Response[ListUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.ListUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserStats(context.Context, *connect.Request[GetUserStatsRequest]) (*connect.Response[UserStats], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.GetUserStats is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUserSetting(context.Context, *connect.Request[GetUserSettingRequest]) (*connect.Response[model.UserSetting], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.GetUserSetting is not implemented"))
}

func (UnimplementedUserServiceHandler) UpdateUserSetting(context.Context, *connect.Request[UpdateUserSettingRequest]) (*connect.Response[model.UserSetting], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.UpdateUserSetting is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUserSettings(context.Context, *connect.Request[ListUserSettingsRequest]) (*connect.Response[ListUserSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.ListUserSettings is not implemented"))
}

func (UnimplementedUserServiceHandler) ListUserSessions(context.Context, *connect.Request[ListUserSessionsRequest]) (*connect.Response[ListUserSessionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.ListUserSessions is not implemented"))
}

func (UnimplementedUserServiceHandler) RevokeUserSession(context.Context, *connect.Request[RevokeUserSessionRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.UserService.RevokeUserSession is not implemented"))
}
