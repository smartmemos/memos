// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/v2/auth.proto

package v2

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	user "github.com/smartmemos/memos/internal/proto/model/user"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "api.v2.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceGetAuthStatusProcedure is the fully-qualified name of the AuthService's GetAuthStatus
	// RPC.
	AuthServiceGetAuthStatusProcedure = "/api.v2.AuthService/GetAuthStatus"
	// AuthServiceSignInProcedure is the fully-qualified name of the AuthService's SignIn RPC.
	AuthServiceSignInProcedure = "/api.v2.AuthService/SignIn"
	// AuthServiceSignUpProcedure is the fully-qualified name of the AuthService's SignUp RPC.
	AuthServiceSignUpProcedure = "/api.v2.AuthService/SignUp"
	// AuthServiceSignOutProcedure is the fully-qualified name of the AuthService's SignOut RPC.
	AuthServiceSignOutProcedure = "/api.v2.AuthService/SignOut"
)

// AuthServiceClient is a client for the api.v2.AuthService service.
type AuthServiceClient interface {
	// GetAuthStatus returns the current auth status of the user.
	GetAuthStatus(context.Context, *connect.Request[GetAuthStatusRequest]) (*connect.Response[user.User], error)
	// SignIn signs in the user with the given username and password.
	SignIn(context.Context, *connect.Request[SignInRequest]) (*connect.Response[user.User], error)
	// SignUp signs up the user with the given username and password.
	SignUp(context.Context, *connect.Request[SignUpRequest]) (*connect.Response[user.User], error)
	// SignOut signs out the user.
	SignOut(context.Context, *connect.Request[SignOutRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewAuthServiceClient constructs a client for the api.v2.AuthService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := File_api_v2_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		getAuthStatus: connect.NewClient[GetAuthStatusRequest, user.User](
			httpClient,
			baseURL+AuthServiceGetAuthStatusProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetAuthStatus")),
			connect.WithClientOptions(opts...),
		),
		signIn: connect.NewClient[SignInRequest, user.User](
			httpClient,
			baseURL+AuthServiceSignInProcedure,
			connect.WithSchema(authServiceMethods.ByName("SignIn")),
			connect.WithClientOptions(opts...),
		),
		signUp: connect.NewClient[SignUpRequest, user.User](
			httpClient,
			baseURL+AuthServiceSignUpProcedure,
			connect.WithSchema(authServiceMethods.ByName("SignUp")),
			connect.WithClientOptions(opts...),
		),
		signOut: connect.NewClient[SignOutRequest, emptypb.Empty](
			httpClient,
			baseURL+AuthServiceSignOutProcedure,
			connect.WithSchema(authServiceMethods.ByName("SignOut")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	getAuthStatus *connect.Client[GetAuthStatusRequest, user.User]
	signIn        *connect.Client[SignInRequest, user.User]
	signUp        *connect.Client[SignUpRequest, user.User]
	signOut       *connect.Client[SignOutRequest, emptypb.Empty]
}

// GetAuthStatus calls api.v2.AuthService.GetAuthStatus.
func (c *authServiceClient) GetAuthStatus(ctx context.Context, req *connect.Request[GetAuthStatusRequest]) (*connect.Response[user.User], error) {
	return c.getAuthStatus.CallUnary(ctx, req)
}

// SignIn calls api.v2.AuthService.SignIn.
func (c *authServiceClient) SignIn(ctx context.Context, req *connect.Request[SignInRequest]) (*connect.Response[user.User], error) {
	return c.signIn.CallUnary(ctx, req)
}

// SignUp calls api.v2.AuthService.SignUp.
func (c *authServiceClient) SignUp(ctx context.Context, req *connect.Request[SignUpRequest]) (*connect.Response[user.User], error) {
	return c.signUp.CallUnary(ctx, req)
}

// SignOut calls api.v2.AuthService.SignOut.
func (c *authServiceClient) SignOut(ctx context.Context, req *connect.Request[SignOutRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.signOut.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the api.v2.AuthService service.
type AuthServiceHandler interface {
	// GetAuthStatus returns the current auth status of the user.
	GetAuthStatus(context.Context, *connect.Request[GetAuthStatusRequest]) (*connect.Response[user.User], error)
	// SignIn signs in the user with the given username and password.
	SignIn(context.Context, *connect.Request[SignInRequest]) (*connect.Response[user.User], error)
	// SignUp signs up the user with the given username and password.
	SignUp(context.Context, *connect.Request[SignUpRequest]) (*connect.Response[user.User], error)
	// SignOut signs out the user.
	SignOut(context.Context, *connect.Request[SignOutRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := File_api_v2_auth_proto.Services().ByName("AuthService").Methods()
	authServiceGetAuthStatusHandler := connect.NewUnaryHandler(
		AuthServiceGetAuthStatusProcedure,
		svc.GetAuthStatus,
		connect.WithSchema(authServiceMethods.ByName("GetAuthStatus")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceSignInHandler := connect.NewUnaryHandler(
		AuthServiceSignInProcedure,
		svc.SignIn,
		connect.WithSchema(authServiceMethods.ByName("SignIn")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceSignUpHandler := connect.NewUnaryHandler(
		AuthServiceSignUpProcedure,
		svc.SignUp,
		connect.WithSchema(authServiceMethods.ByName("SignUp")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceSignOutHandler := connect.NewUnaryHandler(
		AuthServiceSignOutProcedure,
		svc.SignOut,
		connect.WithSchema(authServiceMethods.ByName("SignOut")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.v2.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceGetAuthStatusProcedure:
			authServiceGetAuthStatusHandler.ServeHTTP(w, r)
		case AuthServiceSignInProcedure:
			authServiceSignInHandler.ServeHTTP(w, r)
		case AuthServiceSignUpProcedure:
			authServiceSignUpHandler.ServeHTTP(w, r)
		case AuthServiceSignOutProcedure:
			authServiceSignOutHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) GetAuthStatus(context.Context, *connect.Request[GetAuthStatusRequest]) (*connect.Response[user.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.AuthService.GetAuthStatus is not implemented"))
}

func (UnimplementedAuthServiceHandler) SignIn(context.Context, *connect.Request[SignInRequest]) (*connect.Response[user.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.AuthService.SignIn is not implemented"))
}

func (UnimplementedAuthServiceHandler) SignUp(context.Context, *connect.Request[SignUpRequest]) (*connect.Response[user.User], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.AuthService.SignUp is not implemented"))
}

func (UnimplementedAuthServiceHandler) SignOut(context.Context, *connect.Request[SignOutRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.v2.AuthService.SignOut is not implemented"))
}
