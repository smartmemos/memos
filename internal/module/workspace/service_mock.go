// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package workspace is a generated GoMock package.
package workspace

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/smartmemos/memos/internal/module/workspace/model"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetProfile mocks base method.
func (m *MockService) GetProfile(ctx context.Context, req *model.GetProfileRequest) (*model.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", ctx, req)
	ret0, _ := ret[0].(*model.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockServiceMockRecorder) GetProfile(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockService)(nil).GetProfile), ctx, req)
}

// GetSetting mocks base method.
func (m *MockService) GetSetting(ctx context.Context, key model.SettingKey, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSetting", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSetting indicates an expected call of GetSetting.
func (mr *MockServiceMockRecorder) GetSetting(ctx, key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSetting", reflect.TypeOf((*MockService)(nil).GetSetting), ctx, key, value)
}
